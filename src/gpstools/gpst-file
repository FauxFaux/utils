#!/usr/bin/perl -w

#=======================================================================
# gpst-file
# File ID: 86736de4-00a1-11de-acc1-000475e441b9
# Generate TAB streams of files with modification time for use with COPY 
# in Postgres
#
# Character set: UTF-8
# ©opyleft 2009– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 3 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use Getopt::Long;

BEGIN {
    push(@INC, "$ENV{'HOME'}/bin/src/gpstools");
    our @version_array;
}

use GPST;
use GPSTxml;

$| = 1;

our $Debug = 0;
our $NA = '\N';
our %Std = (

    'output-format' => 'pgtab',
    'timezone' => '',

);
our %Opt = (

    'author' => '',
    'debug' => 0,
    'description' => '',
    'help' => 0,
    'output-format' => $Std{'output-format'},
    'strip-whitespace' => 0,
    'timezone' => $Std{'timezone'},
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = "0.00";

Getopt::Long::Configure("bundling");
GetOptions(

    "author|a=s" => \$Opt{'author'},
    "debug" => \$Opt{'debug'},
    "description|d=s" => \$Opt{'description'},
    "help|h" => \$Opt{'help'},
    "output-format|o=s" => \$Opt{'output-format'},
    "strip-whitespace|w" => \$Opt{'strip-whitespace'},
    "timezone|T=s" => \$Opt{'timezone'},
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

$GPST::Spc = $Opt{'strip-whitespace'} ? "" : " ";
my $Spc = $GPST::Spc; # FIXME
my $tz_str = "";
if (length($Opt{'timezone'})) {
    if ($Opt{'timezone'} =~ /^[\+\-][0-2][0-9]{3}$/) {
        $tz_str = $Opt{'timezone'};
    } elsif ($Opt{'timezone'} =~ /^z$/i) {
        $tz_str = $Opt{'timezone'};
    } elsif ($Opt{'timezone'} =~ /^[a-z]+$/i) {
        $tz_str = " $Opt{'timezone'}";
    } else {
        die("$progname: $Opt{'timezone'}: Invalid time zone\n");
    }
    $tz_str = uc($tz_str);
}

if ($Opt{'output-format'} eq "xml") {
    print("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<gpstfile>\n");
}

if ($#ARGV < 0) {
    while (<>) {
        chomp();
        print_entry($_);
    }
} else {
    for my $fname (@ARGV) {
        print_entry($fname);
    }
}

if ($Opt{'output-format'} eq "xml") {
    print("</gpstfile>\n");
}

sub print_entry {
    # {{{
    my $filename = shift;
    my $Retval = 0;
    my ($date, $coor) =
       ('', '');
    D("filename = '$filename'");
    if (my @stat_array = stat($filename)) {
        my @TA = localtime($stat_array[9]);
        $date = sprintf("%04u-%02u-%02uT%02u:%02u:%02u%s",
            $TA[5]+1900, $TA[4]+1, $TA[3], $TA[2], $TA[1], $TA[0], $tz_str);
        D("tz_str = '$tz_str'");
        $filename =~ s/^.*\/(.*?)$/$1/;
        my $Output = "";
        if ($Opt{'output-format'} eq "xml") {
            if (length("$filename$date")) {
                $Output = join("",
                    "$Spc$Spc<file>\n",
                    length($filename)
                        ? sprintf("$Spc$Spc$Spc$Spc<filename>%s</filename>\n",
                            txt_to_xml($filename))
                        : "",
                    length($date)
                        ? sprintf("$Spc$Spc$Spc$Spc<date>%s</date>\n",
                            txt_to_xml($date))
                        : "",
                    length($Opt{'description'})
                        ? sprintf("$Spc$Spc$Spc$Spc<desc>%s</desc>\n",
                            txt_to_xml($Opt{'description'}))
                        : "",
                    length($Opt{'author'})
                        ? sprintf("$Spc$Spc$Spc$Spc<author>%s</author>\n",
                            txt_to_xml($Opt{'author'}))
                        : "",
                    "$Spc$Spc</file>\n",
                );
            }
        } elsif ($Opt{'output-format'} eq "pgtab") {
            # Version information {{{
            # Version 1:
            #   "1" \t
            #   date \t
            #   "(lat,lon)"-coordinates \t
            #   description \t
            #   filename \t
            #   author \n
            # }}}
            $Output = pgtab_entry(
                1, # Version number
                $date,
                $coor,
                $Opt{'description'},
                $filename,
                $Opt{'author'}
            );
        } else {
            die("$progname: $Opt{'output-format'}: Unknown output format\n");
        }
        print($Output);
        $Opt{'verbose'} && print(STDERR $Output);
    } else {
        warn("$progname: $filename: Cannot stat file: $!\n");
    }
    return($Retval);
    # }}}
} # print_entry()

sub pgtab_entry {
    # {{{
    my ($Version, $Date, $Coor, $Descr, $Filename, $Author) = @_;
    defined($Date)     || ($Date = $NA);
    defined($Coor)     || ($Coor = $NA);
    defined($Descr)    || ($Descr = $NA);
    defined($Filename) || ($Filename = $NA);
    defined($Author)   || ($Author = $NA);
    my $Retval = "";
    if ($Version == 1) {
        $Retval = join("\t",
            1, # Version number
            postgresql_copy_safe($Date),
            length($Coor)
                ? postgresql_copy_safe($Coor)
                : $NA,
            length($Opt{'description'})
                ? postgresql_copy_safe($Opt{'description'})
                : $NA,
            length($Filename)
                ? postgresql_copy_safe($Filename)
                : $NA,
            length($Opt{'author'})
                ? postgresql_copy_safe($Opt{'author'})
                : $NA
        ) . "\n";
    }
    return($Retval);
    # }}}
} # pgtab_entry()

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<END);

Usage: $progname [options] [file [files [...]]]

Generate TAB streams with filenames and file modification time for use 
with PostgreSQL’s COPY command. If no filenames are specified on the 
command line, file names are read from stdin.

Options:

  -a, --author x
    Specify author of file.
  -d, --description x
    Specify description for file.
  -h, --help
    Show this help.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  -o x, --output-format x
    Create output of type x:
      xml
      pgtab
    Default: "$Std{'output-format'}".
  -T X, --timezone X
    Prepend X as timezone to the date. Valid formats:
      UTC offset
        A '+' or '-' followed by a four-digit number (HHMM) which 
        indicates the offset relative to UTC. Examples:
          +0000
          -1600
          +0630
      Time zone abbreviation. Examples:
        UTC
        Z
        CET
  -w, --strip-whitespace
    Strip all unnecessary whitespace.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation, either version 3 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
