#!/usr/bin/perl -w

#=======================================================================
# $Id$
# Create random 3D surface for use in plotting programs.
#
# Character set: UTF-8
# ©opyleft 2007– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

BEGIN {
    our @version_array;
}

use strict;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Opt = (
    'debug' => 0,
    'help' => 0,
    'max' => 1000,
    'min' => 0,
    'verbose' => 0,
    'version' => 0,
);

our $progname = $0;
$progname =~ s#^.*/(.*?)$#$1#;

my $rcs_id = '$Id$';
my $id_date = $rcs_id;
$id_date =~ s/^.*?\d+ (\d\d\d\d-.*?\d\d:\d\d:\d\d\S+).*/$1/;

push(@main::version_array, $rcs_id);

Getopt::Long::Configure("bundling");
GetOptions(
    "debug" => \$Opt{'debug'},
    "help|h" => \$Opt{'help'},
    "max=f" => \$Opt{'max'},
    "min=f" => \$Opt{'min'},
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},
) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
$Opt{'version'} && print_version();

my ($Lat, $Lon) =
    (  0,    0);

my @Ele = ();

my $Size = 20;

while (1) {
    D("Lon = '$Lon'");
    for $Lon (0..$Size) {
        my $Left = defined($Ele[$Lat][$Lon-1]) ? $Ele[$Lat][$Lon-1]  : rand(1);
        my $Right = defined($Ele[$Lat][$Lon+1]) ? $Ele[$Lat][$Lon+1] : rand(1);
        my $Over = defined($Ele[$Lat+1][$Lon]) ? $Ele[$Lat+1][$Lon]  : rand(1);
        my $Under = defined($Ele[$Lat-1][$Lon]) ? $Ele[$Lat-1][$Lon] : rand(1);
        my $Curr = ($Left+$Right+$Over+$Under)/4;
        $Curr += rand(1) >= 0.5 ? rand(1) : 0-rand(1);
        # until ($Curr >= $Opt{'min'}) {
        #     D("Curr >= Min");
        #     $Curr += rand(1) * 1.0;
        # }
        # until ($Curr <= $Opt{'max'}) {
        #     D("Curr <= Max");
        #     $Curr -= rand(1) * 1.0;
        # }
        if ($Lat > 0 && $Lat < $Size && $Lon > 0 && $Lon < $Size) {
            # print("$Lat\t$Lon\t$Curr\n");
            # print($Lat   . "\t" . $Lon-1 . "\t" . $Left  . "\n");
            print($Lat   . "\t" . $Lon   . "\t" . $Curr  . "\n");
            # print("\n");
            print($Lat+1 . "\t" . $Lon   . "\t" . $Over  . "\n");
            print($Lat   . "\t" . $Lon   . "\t" . $Curr  . "\n");
            # print("\n");
            # print($Lat   . "\t" . $Lon+1 . "\t" . $Right . "\n");
            print($Lat   . "\t" . $Lon   . "\t" . $Curr  . "\n");
            # print("\n");
            print($Lat-1 . "\t" . $Lon   . "\t" . $Under . "\n");
            print($Lat   . "\t" . $Lon   . "\t" . $Curr  . "\n");
            # print("\n");
        }
        $Ele[$Lat][$Lon] = $Curr;
        print("\n");
    }
    $Lat += 1;
    last if ($Lat > $Size);
}

sub print_version {
    # Print program version {{{
    for (@main::version_array) {
        print("$_\n");
    }
    exit(0);
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    print(<<END);

$rcs_id

Usage: $progname [options] [file [files [...]]]

Options:

  -h, --help
    Show this help.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 REVISION

$Id$

=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
# End of file $Id$
