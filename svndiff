#!/usr/bin/perl -w

#=======================================================================
# $Id$
# Uses a specified diff program for viewing differences in a Subversion 
# versioned directory tree.
#
# Character set: UTF-8
# License: GNU General Public License, see end of file for legal stuff.
# ©opyleft 2004– Øyvind A. Holm <sunny@sunbase.org>
# This file is part of the svnutils project — http://svnutils.tigris.org
#=======================================================================

use strict;

$| = 1;

use Getopt::Std;
our ($opt_C, $opt_c, $opt_e, $opt_h, $opt_p, $opt_r) =
    (     0,     "",     "",      0,     "",     "");

my $Debug = 0;

# Default value, can be overridden in ~/.svndiffrc
my $Cmd = "vimdiff";

# Change this if the svn executable is non-standard and you don’t want 
# to use the -e option all the time:
my $CMD_SVN = "svn";

my $ST_CONFLICT = 'C';
my $ST_MODIFIED = 'M';

our $progname = $0;
$progname =~ s#^(.*)/(.+?)$#$2#;

my $rc_file = defined($ENV{SVNDIFFRC}) ? $ENV{SVNDIFFRC} : "";

unless (length($rc_file)) {
    if (defined($ENV{HOME})) {
        $rc_file = "$ENV{HOME}/.svndiffrc";
    } else {
        warn("Both SVNDIFFRC and HOME environment variables not defined, " .
             "unable to read rc file.\n" .
             "Using default values. To override, " .
             "define the SVNDIFFRC variable.\n"
        );
    }
}

length($rc_file) && read_rcfile($rc_file);

getopts('Cc:e:hp:r:') || die("$progname: Option error. Use -h for help.\n");

$opt_h && usage(0);

length($opt_c) && ($Cmd = $opt_c);
length($opt_p) && ($Cmd .= " $opt_p");
length($opt_e) && ($CMD_SVN = $opt_e);

my $stat_chars = "$ST_CONFLICT$ST_MODIFIED";
$opt_C && ($stat_chars = "$ST_CONFLICT");

my @mod_array = ();

if (scalar(@ARGV)) {
    # Filename(s) specified on command line. {{{
    @mod_array = @ARGV;
    for my $Curr (@mod_array) {
        D("ARG = \"$Curr\"\n");
        if (-f $Curr && !-l $Curr) {
            D("$Curr is a file.");
            my $has_conflict;
            D("Before PipeFP 1: CMD_SVN = \"$CMD_SVN\"");
            if (open(PipeFP, "$CMD_SVN stat $Curr -q |")) {
                $has_conflict = (<PipeFP> =~ /$ST_CONFLICT/) ? 1 : 0;
            } else {
                warn("$progname: Error opening \"$CMD_SVN $Curr stat -q\" pipe");
            }
            diff_file($Curr, $has_conflict, $opt_r);
        } else {
            D("$Curr is NOT a file.");
            warn("$progname: \"$Curr\" is not a file or doesn't exist\n");
        }
    }
    # }}}
} else {
    # {{{
    length($opt_r) && die("You need to specify one or more files when using the -r option\n");
    D("Before PipeFP 2: CMD_SVN = \"$CMD_SVN\"");
    if (open(PipeFP, "$CMD_SVN stat -q |")) {
        my %has_conflict = ();
        while (<PipeFP>) {
            chomp();
            D("<PipeFP> = \"$_\"\n");
            if (/^([$stat_chars])......(.*)/) {
                my ($Stat, $File) =
                   (   $1,    $2);
                D("\$Stat = \"$Stat\", \$File = \"$File\"\n");
                push(@mod_array, $File);
                $has_conflict{$File} = ($Stat =~ /$ST_CONFLICT/) ? 1 : 0;
                D("\$has_conflict{$File} = \"$has_conflict{$File}\"\n");
            }
        }
        close(PipeFP);
        for (sort @mod_array) {
            my $File = $_;
            (-f $File && !-l $File) && diff_file($File, $has_conflict{$File});
        }
    } else {
        warn("$progname: Error opening \"$CMD_SVN stat -q\" pipe");
    }
    # }}}
}

sub diff_file {
    # {{{
    my ($File1, $has_conflict, $Revs) = @_;
    my $Path = "";
    my $File = $File1;
    defined($Revs) || ($Revs = "");

    D("diff_file(\"$File1\", \"$has_conflict\", \"$Revs\");\n");

    if ($File =~ m#^(.*/)(.+?)$#) {
        $Path = $1;
        $File = $2;
    }

    my $File2 = "";
    my @rm_files = ();

    if (length($opt_r)) {
        my ($Rev1, $Rev2);
        my ($tmp1, $tmp2);
        if ($opt_r =~ /^(\d+)$/) {
            $Rev1 = $1;
            $Rev2 = "";
            $tmp1 = "$File1.r$Rev1.tmp";
        } elsif ($opt_r =~ /^(\d+):(\d+)$/) {
            $Rev1 = $1;
            $Rev2 = $2;
            $tmp1 = "$File1.r$Rev1.tmp";
            $tmp2 = "$File1.r$Rev2.tmp";
        } else {
            die("Revision format error in -r option, use -h for help\n");
        }
        D("Rev1 = \"$Rev1\", Rev2 = \"$Rev2\"\n");
        (-e $tmp1)
            && (die("$progname: $tmp1: Temporary file already exists\n"));
        (length($Rev2) && -e $tmp2)
            && (die("$progname: $tmp2: Temporary file already exists\n"));
        mysyst("$CMD_SVN cat -r$Rev1 $File1 >$tmp1");
        mysyst("$CMD_SVN cat -r$Rev2 $File1 >$tmp2") if (length($Rev2));
        if (length($Rev2)) {
            $File2 = "$tmp2";
            $File1 = "$tmp1";
            push(@rm_files, $tmp1, $tmp2);
        } else {
            $File2 = "$tmp1";
            push(@rm_files, $tmp1);
        }
    } else {
        $File2 = "$Path.svn/text-base/$File.svn-base";
    }

    D("File1 = \"$File1\"\n");
    D("File2 = \"$File2\"\n");

    (-e $File1) || (warn("$File1: File not found\n"), return);
    (-e $File2) || (warn("$File2: File not found" .
                         length($opt_r) ? ""
                                        : ", is not under version " .
                                          "control" .
                         "\n"
                        ),
                        return
                   );

    if ($Cmd eq "vimdiff") {
        mysyst("$Cmd $File1 $File2");
    } else {
        mysyst("$Cmd $File2 $File1");
    }

    for my $curr_rm (@rm_files) {
        D("Removing tempfile \"$curr_rm\"...");
        unlink($curr_rm) || warn("$progname: $curr_rm: Can't delete temporary file: $!");
    }

    if (!length($opt_r) && $has_conflict) {
        print("$progname: Write y and press ENTER if the conflict " .
              "in $File1 is resolved: ");
        if (<STDIN> =~ /^y$/i) {
            print("$progname: OK, marking $File1 as resolved.\n");
            mysyst("$CMD_SVN resolved $File1");
        }
    }

    # Sleep one second after $Cmd is done to make it easier to interrupt 
    # the thing with CTRL-C if there are many files
    sleep(1) if (scalar(@mod_array) > 1);
    # }}}
} # diff_file()

sub D {
    # {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

sub deb_wait {
    # {{{
    $Debug || return;
    print("debug: Press ENTER...");
    <STDIN>;
    # }}}
} # deb_wait()

sub mysyst {
    # {{{
    my @Args = @_;
    my $system_txt = sprintf("system(\"%s\");", join("\", \"", @Args));
    D("$system_txt");
    deb_wait();
    system(@_);
    # }}}
} # mysyst()

sub read_rcfile {
    # {{{
    my $File = shift;

    D("read_rcfile(\"$File\")");
    if (open(RcFP, "<$File")) {
        my $all_rc = join("", <RcFP>);
        close(RcFP);
        D("\$all_rc \x7B\x7B\x7B\n$all_rc\n\x7D\x7D\x7D");

        my $el_top = $all_rc;
        $el_top =~ s/<!--.*?-->//gsx;

        $el_top =~
        s{
            <svndiffrc\b(.*?)>(.*?)</svndiffrc>
        }
        {
            my $el_svndiffrc = $2;
            D("Inside <svndiffrc></svndiffrc>");
            D("\$el_svndiffrc \x7B\x7B\x7B\n$el_svndiffrc\n\x7D\x7D\x7D");
            $el_svndiffrc =~
            s{
                <diffprog\b(.*?)>(.*?)</diffprog>
            }
            {
                $Cmd = xml_to_txt($2);
                D("read_rcfile(): \$Cmd = \"$Cmd\"");
                "";
            }sex;

            $el_svndiffrc =~
            s{
                <svnclient\b(.*?)>(.*?)</svnclient>
            }
            {
                $CMD_SVN = xml_to_txt($2);
                D("read_rcfile(): \$CMD_SVN = \"$CMD_SVN\"");
                "";
            }sex;
            print_leftover($el_svndiffrc, "svndiffrc");
        }sex;
        print_leftover($el_top, "top");
    } else {
        warn("$progname: $File: Can't open rc file for read\n");
    }
    # }}}
} # read_rcfile()

sub print_leftover {
    # Print all non-whitespace in a string, used to spot erroneous XML. {{{
    $Debug || return("");
    my ($Txt, $Element) = @_;
    $Txt =~ s/^\s+//gs;
    $Txt =~ s/\s+$//gs;
    $Txt =~ s/\s+/ /g;
    defined($Element) || ($Element = "[unknown]");
    if ($Txt =~ /\S/) {
        warn("Leftover: $Element: \"$Txt\"\n");
    }
    return("");
    # }}}
} # print_leftover()

sub txt_to_xml {
	# {{{
	my $Txt = shift;
	$Txt =~ s/&/&amp;/gs;
	$Txt =~ s/</&lt;/gs;
	$Txt =~ s/>/&gt;/gs;
	return($Txt);
	# }}}
} # txt_to_xml()

sub xml_to_txt {
	# {{{
	my $Txt = shift;
	$Txt =~ s/&lt;/</gs;
	$Txt =~ s/&gt;/>/gs;
	$Txt =~ s/&amp;/&/gs;
	return($Txt);
	# }}}
} # xml_to_txt()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;
    print(<<END);

Usage: $progname [options] [file [...]]

Options:

-C    Only run diff on conflicted files.
-c x  Use x as the diff command. Default: "$Cmd".
-e x  Use x as the svn executable. Default: "$CMD_SVN".
-h    Show this help.
-p x  Use x as parameters to the diff program.
-r x  Run a $Cmd command against previous revisions:
        111:222
          Compare r111 and r222.
        123
          Compare your working file against r123.

END
    exit($Retval);
    # }}}
} # usage()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME

svndiff

=head1 REVISION

$Id$

=head1 SYNOPSIS

svndiff [options] [file [...]]

=head1 DESCRIPTION

Run the diff program on every modified file in current directory and all 
subdirectories or on the files specified on the command line.
Needs the svn command-line client unless files are specified.

=over 4

=item B<-C>

Only run diff on conflicted files.

=item B<-c> x

Use x as the diff command. Default: "svndiff".

=item B<-e> x

-e x  Use x as the svn executable.
Example:

  svndiff -e /usr/local/bin/svn-1.0

=item B<-p> x

Use x as parameters to the diff program.

=item B<-h>

Print a brief help summary.

=item B<-r> x

Run the external diff command against previous revisions:

  111:222
    Compare r111 and r222.
  123
    Compare your working file against r123.

=back

=head1 FILES

=over 4

=item F<~/.svndiffrc>

A configuration file where you can store your own settings.
It is a standard XML file with this structure:

  <svndiffrc>
    <diffprog>vimdiff</diffprog>
    <svnclient>svn</svnclient>
  </svndiffrc>

(Whitespace is optional and more options will come.)

The string inside the C<diffprog> elements can be set to whatever your 
diff program is called as, the default string is "vimdiff".

You can also define an alternative svn(1) client to use inside the 
C<svnclient> elements.
The default value here is of course "svn".

=back

=head1 ENVIRONMENT VARIABLES

=over 4

=item I<SVNDIFFRC>

Path to a configuration file in another location than F<~/.svndiffrc> .

=back

=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny _AT_ sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm &lt;sunny@sunbase.org&gt;
This is free software; see the file F<COPYING> for legalese stuff.

This file is part of the svnutils project — 
L<http://svnutils.tigris.org>

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
# End of file $Id$
