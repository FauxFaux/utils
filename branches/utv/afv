#!/usr/bin/perl -w

#================================================
# $Id: afv,v 1.13.2.11 2004/04/15 13:53:43 sunny Exp $
# Lagrer alle nye versjoner av en fil.
#
# ©2001–2004 Øyvind A. Holm. Lisens: GNU GPL ♥
#================================================

# FIXME: Finn en standard Perl-måte for å erstatte kjøring av /bin/pwd .

use strict;
use Fcntl ':flock';
use File::Path;
use Digest::MD5;
use Getopt::Std;

our $Debug = 0;

our ($opt_d, $opt_h, $opt_l) =
    ("",     0,      ""    );
getopts('d:hl:');

$| = 1;

if ($opt_h) {
	# Skriv ut hjelpen {{{
	print(<<END);

Syntax: $0 [valg] [fil [flere filer [...]]]

Lagrer flere versjoner av en eller flere filer i katalogen som \$AFVROOT
er satt til. Hvis ingen filer er spesifisert på kommandolinja, leses
filnavn fra stdin.

Valg:

-d X  De forskjellige versjonene skal lagres under X. Overstyrer
      \$AFVROOT .
-h    Hjelp.
-l X  Kjør i loop, sjekk filene hvert X. sekund. Eksempel:

        afv -l5 foo.txt bar.pl &
        find /etc | afv -l 15 &

      for å kjøre den i bakgrunnen. Bruk afvctl(1) for å stoppe afv’er
      som kjører. Filnavn på filer som lagres blir ikke skrevet ut når
      "-l"-parameteret brukes.

Som filnavn kan jokertegn (wildcards) også brukes. Hvis disse escapes,
brukes den innebygde glob’en og nye filer blir lagt til når den går i
loop. Eksempel:

  afv -l5 '*' &

sjekker alle filer hvert femte sekund og kjører også ny glob hver gang
loopen gjentas.

END
	exit(0);
	# }}}
}

unless (length($opt_d)) {
	defined($ENV{AFVROOT}) || die("AFVROOT er ikke definert");
}

my $Dir = ".AFV";
my $root_dir = length($opt_d) ? $opt_d : $ENV{AFVROOT};
my $dest_dir = "";
my $curr_dir = "";
my ($do_loop, $sleep_time, $orig_dir) = (0, 5, `/bin/pwd`); # FIXME
chomp($orig_dir);

if (length($opt_l)) {
	if ($opt_l =~ /^\d+$/) {
		$do_loop = 1;
		$sleep_time = $opt_l;
	} else {
		die("Parameteret til -l må være et tall.\n");
	}
}

my @Files = ();
glob_files();

LOOP:
foreach my $FullCurr (@Files) {
	# {{{
	my $Curr = $FullCurr;
	my $another_dir = 0;
	check_stop();
	next LOOP if (!-f $Curr || -l $Curr);
	if ($Curr =~ m#(.*)/(.*?)$#) {
		$another_dir = 1;
		unless (chdir($1)) {
			warn("Klarte ikke chdir(\"$1\"): $!");
			next LOOP;
		}
		$Curr = $2;
	}
	chomp($curr_dir = `/bin/pwd`); # FIXME
	$dest_dir = "$root_dir$curr_dir";
	-d $dest_dir || mkpath($dest_dir, 1) || die("mkpath($dest_dir): $!");
	my $afv_dir = "$dest_dir/$Dir";
	-d $afv_dir || mkpath($afv_dir, 1) || die("mkpath($Dir): $!");
	my $lock_dir = "$afv_dir/$Curr.lock";
	my $lastmd5_file = "$afv_dir/$Curr.lastmd5";
	my $currmd5_file = "$afv_dir/$Curr.currmd5";
	my $start_lock = time;

	until (mkdir($lock_dir, 0777)) {
		warn(sec_to_string(time) . ": $lock_dir: Venter på lockdir, " . (time-$start_lock) . " sekunder");
		my_sleep(5);
	}
	D(sprintf("Årntli og offisiell MD5: %s\n", `md5sum $Curr`));
	if (open(FromFP, "<$Curr")) {
		binmode(FromFP);
		if (flock(FromFP, LOCK_EX)) {
			# {{{
			my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size, $atime, $mtime, $ctime, $blksize, $blocks) = stat(FromFP);
			my $date_str = sec_to_string($mtime);
			my $to_file = "$dest_dir/$date_str.$Curr";
			if (-e $to_file) {
				close(FromFP);
				goto CLEANUP;
			}
			seek(FromFP, 0, 0) || die("$Curr: Klarte ikke å seeke til starten: $!");

			my $curr_md5 = Digest::MD5->new->addfile(*FromFP)->hexdigest;
			D("curr_md5 = $curr_md5");
			open(CurrMD5FP, ">$currmd5_file") || die("$currmd5_file: Klarte ikke å åpne fila for skriving: $!");
			print(CurrMD5FP "$curr_md5\n") || die("$currmd5_file: Feil under skriving til fila. $!");
			close(CurrMD5FP);
			my $last_md5 = "";

			if (-e $lastmd5_file) {
				if (open(LastMD5FP, "<$lastmd5_file")) {
					chomp($last_md5 = <LastMD5FP>);
					$last_md5 =~ s/^([0-9a-fA-F]{32})/\L$1\E/;
					close(LastMD5FP);
				} else {
					warn("$lastmd5_file: Feil under åpning for lesing: $!");
				}
			}

			D("last_md5 = \"$last_md5\", curr_md5 = \"$curr_md5\"");
			if ($curr_md5 ne $last_md5) {
				print("$date_str.$Curr\n") unless $do_loop;
				if (seek(FromFP, 0, 0)) {
					if (open(ToFP, ">$to_file")) {
						if (flock(ToFP, LOCK_EX)) {
							while (<FromFP>) {
								print(ToFP $_);
							}
						} else {
							warn("$to_file: Klarte ikke flock(): $!");
						}
						close(ToFP);
						unlink("$lastmd5_file");
						rename("$currmd5_file", "$lastmd5_file") || die(qq{Klarte ikke rename("$currmd5_file", "$lastmd5_file")});
					} else {
						warn("$Curr: Klarte ikke å åpne fila for skriving: $!");
					}
				} else {
					warn("$Curr: Klarte ikke å seeke til starten: $!");
				}
			}
			# }}}
		} else {
			warn("$Curr: Klarte ikke flock(): $!");
		}
		close(FromFP);
	} else {
		warn("$Curr: Klarte ikke å åpne fila for lesing: $!");
	}

	CLEANUP:
	rmdir($lock_dir) || warn("$lock_dir: Klarte ikke å fjerne lockdir: $!");
	if ($another_dir) {
		chdir($orig_dir) || die("$orig_dir: Klarte ikke chdir() til originalkatalogen: $!");
	}
	# }}}
}

if ($do_loop) {
	check_stop();
	glob_files();
	my_sleep($sleep_time);
	goto LOOP;
}

exit;

sub D {
	chomp(my $Txt = shift);
	my @call_info = caller;
	$Debug && print(STDERR "DEBUG $call_info[2]: $Txt\n");
}

sub sec_to_string {
	# Konverter antall sekunder sia 1970-01-01 00:00:00 GMT til ååååmmddTttmmssZ {{{
	my @TA = gmtime(shift);
	my $Retval = sprintf("%04u%02u%02uT%02u%02u%02uZ", $TA[5]+1900, $TA[4]+1, $TA[3], $TA[2], $TA[1], $TA[0]);
	return($Retval);
	# }}}
} # sec_to_string()

sub glob_files {
	# Returnerer en array med filnavn som samsvarer med parametrene. {{{
	@Files = ();
	if (scalar(@ARGV)) {
		foreach (@ARGV) {
			push(@Files, glob $_);
		}
	} else {
		while(<>) {
			push(@Files, glob $_);
		}
	}
	# }}}
} # glob_files()

sub check_stop {
	# Sjekk om stop-fila finnes og i så fall avbrytes alt. {{{
	foreach ($root_dir, $dest_dir) {
		if (-e "$_/stop") {
			if (-e "$_/protected") {
				print(STDERR "$curr_dir: $_/stop finnes, men katalogen er beskyttet, så vi avslutter ikke.\n");
			} else {
				print(STDERR "$curr_dir: $_/stop finnes, avslutter.\n");
				exit;
			}
		}
	}
	# }}}
} # check_stop()

sub my_sleep {
	# {{{
	my $Secs = shift;
	my $start_time = time;
	if ($Secs <= 2) {
		check_stop();
		sleep($Secs);
	} else {
		until (time >= $start_time+$Secs) {
			sleep(2);
			check_stop();
		}
	}
	# }}}
} # my_sleep()

#### End of file $Id: afv,v 1.13.2.11 2004/04/15 13:53:43 sunny Exp $ ####
