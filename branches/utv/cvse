#!/usr/bin/perl -w

#================================================
# $Id: cvse,v 1.1.2.4 2003/05/24 00:16:09 sunny Exp $
# Edit cvs log messages via output from “cvs log”
# Made by Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License
#================================================

use strict;
use Fcntl ':flock';

$| = 1;

my ($curr_rev, $curr_rcs_file, $curr_work_file) = ("", "", "");
my @Curr = ();
my %Entry = ();
my ($Rev, $Line) = ("", "");
my ($header_done, $tmp_count) = (0, 0);
my %Text = ();
my %missing_written = ();
my ($start_utc, $total_skipped, $total_changed, $total_files) = (time, 0, 0);
my @all_revs = ();
my $eroot_str = "";

defined($ENV{CVSE_ROOT}) && ($eroot_str = " -d $ENV{CVSE_ROOT}");

while (<>) {
	$Line = $_;
	if ($Line =~ /^----------------------------$/) {
		# New revision {{{
		$header_done = 1;
		if (length($Rev) && scalar(@Curr)) {
			$Entry{$Rev} = join("", @Curr);
		}
		@Curr = ();
		$Line = <>;
		if ($Line =~ /^revision (\S+)/) {
			$curr_rev = $1;
		} else {
			die("Line $.: Expected \"revision \", got \"$Line\".\". Aborting.\n");
		}
		$Line = <>;
		unless ($Line =~ /^date: (\S+\s+\S+) .*/) {
			warn("Expected \"date: \", got \"$Line\".\"");
		}
		if (!($Line =~ /^date: \d\d\d\d\/\d\d\/\d\d \d\d:\d\d:\d\d;\s+author: .*/) && !($Line =~ /^branches: .+;$/)) {
			push(@Curr, $Line);
		} else {
			# NOP
			D("Found \"^date: \" or \"^branches: \", skipping.\n");
		}
		$Rev = "$curr_work_file,v.$curr_rev";
		# }}}
	} elsif ($Line =~ /^=============================================================================$/) {
		# List finished for this file, change the modified messages {{{
		if (length($Rev) && scalar(@Curr)) {
			$Entry{$Rev} = join("", @Curr);
		}
		@all_revs = ();
		while (my ($l_name, $l_val) = each %Entry) {
			push(@all_revs, $l_name);
		}
		for (@all_revs) {
			my $Curr = $_;
			my ($a_file, $a_rev) = ("", "");
			if ($Curr =~ /^(.+),v\.([\d\.]+?)$/) {
				($a_file, $a_rev) = ($1, $2);
				if (length($a_file) && length($a_rev)) {
					change_message($a_file, $a_rev, $Entry{$Curr});
				}
			} else {
				warn("Wrong revision format \"$Curr\", skipping revision\n");
			}
		}
		$total_files++;
		($curr_rev, $Rev) = ("", "");
		%Entry = ();
		@Curr = ();
		# }}}
	} elsif (!$header_done && $Line =~ /^RCS file: (.*)/) {
		$curr_rcs_file = $1;
	} elsif (!$header_done && $Line =~ /^Working file: (.*)/) {
		$curr_work_file = $1;
	} else {
		# Regular log message {{{
		if (length($Rev)) {
			if (!($Line =~ /^date: \d\d\d\d\/\d\d\/\d\d \d\d:\d\d:\d\d;\s+author: .*/) && !($Line =~ /^branches: .+;$/)) {
				push(@Curr, $_);
			}
		}
		$header_done = 0;
		# }}}
	}
}

printf("\n$total_files file(s) with $total_changed revision(s) changed and $total_skipped revision(s) skipped in %u second(s).\n", time-$start_utc);

sub change_message {
	# Changes a log message for a specific revision of a file if it has changed. {{{
	my ($File, $Rev, $Txt) = @_;
	my $rand_nr = substr(rand(), 2, 6);
	D("rand_nr = \"$rand_nr\"\n");
	my $tmp_file = "tmp.cvse.$$.$rand_nr.tmp";
	my $compare_text = get_log_message($File, $Rev);
	if ($Txt ne $compare_text) {
		print("Changing message for $File,v $Rev ...\n");
		# print("==== Original text in $File $Rev \x7B\x7B\x7B ====\n$compare_text==== \x7D\x7D\x7D ====\n");
		# print("==== New text for $File $Rev \x7B\x7B\x7B ====\n$Txt==== \x7D\x7D\x7D ====\n");
		unless (-e $File) {
			# File does not exist in this revision, change revision to make it appear and make it possible for CVS to update the message {{{
			print("$File not found, running cvs update with random revisions to try to make it appear...\n");
			for my $Curr (@all_revs) {
				if ($Curr =~ /^(.+),v\.([\d\.]+?)$/) {
					my $ex_str = "cvs$eroot_str upd -r $2 $File";
					print("Executing \"$ex_str\"...\n");
					system($ex_str);
					if (-e $File) {
						print("File exists with (old) revision, is now able to change log message.\n");
						last;
					}
				}
			}
			if (!-e $File && !defined($missing_written{$File})) {
				warn("$File: File does still not exist, log messages for this file not changed\n");
				$missing_written{$File} = 1;
			}
			# }}}
		}
		my @Arr = split(/\n/, $Txt);
		if (open(TxtFP, ">$tmp_file")) {
			for (@Arr) {
				my $Line = $_;
				if (/^date: .*/ || /^branches: .*/) {
					# NOP
				} else {
					print(TxtFP "$Line\n");
				}
			}
			close(TxtFP) || die("$tmp_file: Error closing file: $!");
			my $exec_str = "cvs$eroot_str admin -m$Rev:\"`cat $tmp_file`\" $File";
			print(" \"$exec_str\" ...\n");
			my $Deb = "";
			$Deb = get_log_message($File, $Rev);
			print("==== BEFORE: $File $Rev \x7B\x7B\x7B ====\n$Deb==== \x7D\x7D\x7D ====\n");
			system($exec_str);
			$Deb = get_log_message($File, $Rev);
			print("==== AFTER : $File $Rev \x7B\x7B\x7B ====\n$Deb==== \x7D\x7D\x7D ====\n");
			unlink($tmp_file) || warn("$tmp_file: Cannot remove file: $!\n");
			print(" ... DONE\n");
		} else {
			warn("Cannot open temporary file \"$tmp_file\", log messages not changed: $!\n");
		}
		$total_changed++;
	} else {
		print("Message for $File,v $Rev is unchanged, skipping...\n");
		$total_skipped++;
	}
	# }}}
}

sub get_log_message {
	# Returns the cvs log message for the specified revision of a file. Used by change_message(). {{{
	my ($File, $Rev) = @_;
	my $header_done = 0;
	my @Arr = ();
	my $getl_call = "get_log_message(\"$File\", \"$Rev\")";

	if (open(PipeFP, "cvs$eroot_str log -r$Rev $File |")) {
		while (my $Line = <PipeFP>) {
			if ($Line =~ /^=============================================================================$/) {
				if (!$header_done) {
					warn("Log terminator line not found, $getl_call returns nothing\n");
				} else {
					last;
				}
			}
			if ($header_done) {
				if (!($Line =~ /^date: \d\d\d\d\/\d\d\/\d\d \d\d:\d\d:\d\d;\s+author: .*/) && !($Line =~ /^branches: .+;$/)) {
					push(@Arr, $Line);
				}
			}
			if ($Line =~ /^----------------------------$/) {
				$Line = <PipeFP>;
				if ($Line =~ /^revision (\S+)/) {
				} else {
					warn("$getl_call expected \"revision \", got \"$Line\".\". Ignoring.\n");
				}
				$header_done && warn("Found extra header separator in $getl_call, continuing...\n");
				$header_done = 1;
			}
		}
		close(PipeFP);
		if ($header_done) {
			return(join("", @Arr));
		} else {
			warn("Header separator not found, $getl_call returns nothing\n");
		}
	} else {
		die("Can't open cvs pipe: $!");
	}
	# }}}
}

sub D {
	# print(STDERR @_);
}

__END__

# POD {{{

=pod

=head1 NAME

cvse - CVSEdit - edit CVS log messages

=head1 REVISION

$Id: cvse,v 1.1.2.4 2003/05/24 00:16:09 sunny Exp $

=head1 SYNOPSIS

cvse [logfile [...]]

=head1 DESCRIPTION

=head1 ENVIRONMENT VARIABLES

CVSE_ROOT

=head1 BUGS

=head1 AUTHOR

Made by Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>.

=head1 LICENCE

GNU General Public License.
The greatest of them all.

=cut

# }}}

# vim600: set fdm=marker fdc=3 fenc=utf8 :

# End of file $Id: cvse,v 1.1.2.4 2003/05/24 00:16:09 sunny Exp $
