#!/usr/bin/perl -w

#=======================================================================
# $Id$
# Stores the file date in a special svn property.
#
# Character set: UTF-8
# ©opyleft 2006– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License, see end of file for legal stuff.
#=======================================================================

use strict;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Opt = (
    'debug' => 0,
    'directories' => 0,
    'help' => 0,
    'version' => 0,
    'xml' => 0
);

our $progname = $0;
$progname =~ s#^.*/(.*?)$#$1#;

my $rcs_id = '$Id$';
my $id_date = $rcs_id;
$id_date =~ s/^.*?\d+ (\d\d\d\d-.*?\d\d:\d\d:\d\d\S+).*/$1/;

Getopt::Long::Configure("bundling");
GetOptions(
    "debug" => \$Opt{'debug'},
    "directories|d" => \$Opt{'directories'},
    "help|h" => \$Opt{'help'},
    "version" => \$Opt{'version'},
    "xml|x" => \$Opt{'xml'}
) || die("$progname: Option error. Use -h for help.\n");

my $PROP_NAME = "filedate";
my $CMD_SVN = "svn";

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
$Opt{'version'} && print_version();

for my $File (@ARGV) {
    # {{{
    my @stat_array = stat($File);
    if (scalar(@stat_array)) {
        if (-d $File && !$Opt{'directories'}) {
            warn("$progname: $File: Ignoring directory\n");
        } else {
            my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size, 
                $atime, $mtime, $ctime, $blksize, $blocks) = @stat_array;
            my @TA = gmtime($mtime);
            my $date_str = sprintf("%04u-%02u-%02uT%02u:%02u:%02uZ",
                $TA[5]+1900, $TA[4]+1, $TA[3], $TA[2], $TA[1], $TA[0]);
            mysyst($CMD_SVN, "propset", $PROP_NAME, $date_str, $File);
        }
    } else {
        warn("$progname: $File: Unable to stat() file\n");
    }
    # }}}
}

sub mysyst {
    # {{{
    my @Args = @_;
    my $system_txt = sprintf("system(\"%s\");", join("\", \"", @Args));
    D("$system_txt");
    deb_wait();
    print("@_\n");
    system(@_);
    # }}}
} # mysyst()

sub deb_wait {
    # {{{
    $Debug || return;
    print("debug: Press ENTER...");
    <STDIN>;
    # }}}
} # deb_wait()

sub print_version {
    # Print program version {{{
    xml_print("$rcs_id\n");
    exit(0);
    # }}}
} # print_version()

sub xml_print {
    # Print out some text, using DocBook if --xml is specified {{{
    my $Txt = shift;
    my ($xml_start, $xml_end) =
       (        "",       "");

    if ($Opt{'xml'}) {
        $xml_start = <<END;
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4//EN" "http://docbook.org/xml/4.3/docbookx.dtd">
<article>
  <screen>
END
        $xml_end = <<END;
</screen>
</article>
END
    }

    printf("%s%s%s",
        $xml_start,
        $Opt{'xml'} ? txt_to_xml($Txt) : "\n$Txt\n",
        $xml_end
    );
    # }}}
} # xml_print()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    xml_print(<<END);
$rcs_id

Define a "$PROP_NAME" property containing the timestamp of a 
file/symlink/directory on Subversion-controlled files.

Usage: $progname [options] [file [files [...]]]

Options:

  -d, --directories
    Also set the property on directories, default action is to ignore 
    those.
  -h, --help
    Show this help.
  --version
    Print version information.
  -x, --xml
    Create XML output.
  --debug
    Print debugging messages.
END
    exit($Retval);
    # }}}
} # usage()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    if ($Opt{'xml'}) {
        printf(STDERR "<debug> <pid>%s</pid> <file>%s</file> <line>%s</line> <msg>%s</msg> </debug>\n",
            txt_to_xml($$),
            txt_to_xml($File),
            txt_to_xml($call_info[2]),
            txt_to_xml($Txt)
        );
    } else {
        print(STDERR "$File:$call_info[2] $$ $Txt\n");
    }
    return("");
    # }}}
} # D()

sub txt_to_xml {
    # Return a XML-safe version of a string {{{
    my $Txt = shift;

    $Txt =~ s/&/&amp;/gs;
    $Txt =~ s/</&lt;/gs;
    $Txt =~ s/>/&gt;/gs;
    return($Txt);
    # }}}
} # txt_to_xml()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME

svnfiledate

=head1 REVISION

$Id$

=head1 SYNOPSIS

svnfiledate [options] [file [files [...]]]

=head1 DESCRIPTION

Define a "$PROP_NAME" property containing the timestamp of a 
file/symlink/directory on Subversion-controlled files.

=head1 OPTIONS

=over 4

=item B<-d>, B<--directories>

Also set the property on directories, default action is to ignore those.

=item B<-h>, B<--help>

Print a brief help summary.

=item B<--version>

Print version information.

=item B<-x>, B<--xml>

Create XML output.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS

It’s non-standard. The Subversion client doesn’t have anything like this 
yet, so it will probably change in the future.

=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm &lt;sunny@sunbase.org&gt;
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
# End of file $Id$
