#!/bin/bash

#=======================================================================
# build-git
# File ID: 7075da30-98d2-11de-b3de-00248cd5cf1e
# (C)opyleft 2009 Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 3 or later
#=======================================================================

# Directory where the git build happens
builddir=$HOME/src/git/other/build-git

# Prefix to directory tree where git will be installed. You can change it to 
# for example $HOME/local if you don’t have root access.
pref=/usr/local

# If you don’t have sudo rights or you don’t need it at the location in the 
# file system, clear the value of the $sudo variable
sudo=sudo

# Local name of remote master
# local_master=master
local_master=spearce-master

# Name of remote master
# remote_master=origin/master
remote_master=spearce/master

makeflags=

[ -z "`git --version | grep '^git version '`" ] && {
    echo $0: You need to have git installed to use this script. >&2;
    exit 1;
}

rmdir $builddir 2>/dev/null
if [ ! -d $builddir/. ]; then
    mkdir -p $builddir || {
        echo build-git: $builddir: Cannot create directory;
        exit 1;
    }
    rmdir $builddir
    echo ================= git clone =================
    git clone git://git.kernel.org/pub/scm/git/git.git $builddir
    cd $builddir || { echo build-git: $builddir: Cannot chdir >&2; exit 1; }
    git remote add spearce git://repo.or.cz/git/spearce.git
    git fetch spearce
    git branch --track spearce-master spearce/master
fi
cd $builddir || { echo build-git: $builddir: Cannot chdir >&2; exit 1; }
if [ ! -e GIT-VERSION-GEN ]; then
    # Paranoia check
    echo build-git: Didn’t find GIT-VERSION-GEN. That’s strange, aborting.
    exit 1
fi
echo ================= git status in `pwd` =================
git status
echo
echo If that looks okay to you, press Enter to fetch newest git version
echo -n and start the build, or press CTRL-C to abort.
read
echo ================= git clean =================
git clean -fxd
git checkout -f $local_master
echo ================= git fetch =================
echo ===== origin =====
git fetch origin
echo ===== spearce =====
git fetch spearce
echo ================= git merge $remote_master =================
git merge $remote_master
vername=git.$local_master.`git describe --match 'v1*'`
dest=$pref/varprg/$vername
[ -d $dest/. ] && {
    echo; echo "Sorry, no new git(1) for you this time.";
    echo You’ll have to stick with `git describe --match 'v1*'` for now.;
    exit 0;
}
echo Compiling $vername
echo ================= make $makeflags =================
make prefix=$dest $makeflags all doc info || exit
echo ================= make test =================
make $makeflags test
echo
echo -n If all tests succeeded, press y to continue...
read choice
[ "$choice" = "y" ] || { echo build-git: Aborted; exit 1; }
echo ================= $sudo make install =================
$sudo make prefix=$dest $makeflags install install-doc install-html install-info
echo ================= make install finished =================
$sudo mkdir -p $pref/{prg,varprg,bin}
$sudo rm $pref/prg/git
$sudo ln -svf ../varprg/$vername $pref/prg/git
cd $pref/bin || {
    echo build-git: $pref/bin: Cannot chdir, aborting >&2;
    exit 1;
}
$sudo ln -svf ../prg/git/bin/* .
echo ================= Check that the thing works =================
hash -r
localgit=`./git --version`
globalgit=`git --version`
if [ "$localgit" = "$globalgit" ]; then
    echo Congratulations with your shiny new $globalgit
    git tag compiled-$(hostname)-$(u)
else
    echo Uhm, something went wrong.
    echo Current version of git : $globalgit
    echo Expected version of git: $localgit
    exit 1
fi
echo ================= symlink manpages =================
cd $pref/prg/git/share/man
mansects=`ls`
for f in $mansects; do
    $sudo mkdir -p $pref/share/man/$f
    cd $pref/share/man/$f || {
        echo build-git: $pref/share/man/$f: Could not chdir, aborting >&2;
        exit 1;
    }
    pwd
    $sudo rm *
    $sudo ln -s ../../../prg/git/share/man/$f/* .
done
