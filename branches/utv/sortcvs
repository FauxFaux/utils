#!/usr/bin/perl -w

#==============================================================================
# $Id: sortcvs,v 1.1.2.6 2004/03/14 22:16:19 sunny Exp $
# Sorts the output from "cvs log" into chronological order.
# Made by Ã˜yvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License
#==============================================================================

use strict;
use Getopt::Std;

our ($opt_a, $opt_h) =
    (     0,      0);

getopts('ah');

$opt_h && print_help(0);

my ($curr_date, $curr_rev) = ("", "");
my @Curr = ();
my %Entry = ();
my $Rev = "";
my $Line = "";

while (<>) {
	$Line = $_;
	if ($Line =~ /^----------------------------$/) {
		if (length($Rev) && scalar(@Curr)) {
			$Entry{$Rev} = join("", @Curr);
		}
		@Curr = ();
		push(@Curr, $Line);
		$Line = <>;
		if ($Line =~ /^revision (\S+)/) {
			$curr_rev = $1;
		} else {
			warn("Expected \"revision: \", got \"$Line\".\"");
		}
		push(@Curr, $Line);
		$Line = <>;
		if ($Line =~ /^date: (\S+\s+\S+) .*/) {
			$curr_date = $1;
		} else {
			warn("Expected \"date: \", got \"$Line\".\"");
		}
		push(@Curr, $Line);
		# $Rev = unpack("H*", "$curr_date$curr_rev");
		$Rev = "$curr_date$curr_rev";
	} elsif ($Line =~ /^=============================================================================$/ && !$opt_a) {
		if (length($Rev) && scalar(@Curr)) {
			$Entry{$Rev} = join("", @Curr);
		}
		my @Arr = ();
		while (my ($l_name, $l_val) = each %Entry) {
			push(@Arr, $l_name);
		}
		for (sort @Arr) {
			print($Entry{$_});
		}
		($curr_date, $curr_rev, $Rev) = ("", "", "");
		%Entry = ();
		@Curr = ();
		print("$Line");
	} else {
		if (length($Rev)) {
			push(@Curr, $_);
		} else {
			print("$Line");
		}
	}
}

sub print_help {
	my $Retval = shift;
	print("No help yet.\n");
	exit($Retval);
}

__END__
