#!/usr/bin/perl -w

#=======================================================================
# git-update-dirs
# File ID: f1ba77e4-444e-11e0-963c-00023faf1383
# Update many git local repositories at once
#
# Character set: UTF-8
# ©opyleft 2011– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 3 or later, see end of 
# file for legal stuff.
#=======================================================================

use strict;
use Cwd;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Opt = (

    'bare' => 0,
    'compress' => 0,
    'debug' => 0,
    'fetch' => 0,
    'help' => 0,
    'pull' => 0,
    'push' => 0,
    'recursive' => 0,
    'stdin' => 0,
    'submodule' => 0,
    'test' => 0,
    'verbose' => 0,
    'version' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;
our $VERSION = "0.00";

Getopt::Long::Configure("bundling");
GetOptions(

    "bare|b" => \$Opt{'bare'},
    "compress|c" => \$Opt{'compress'},
    "debug" => \$Opt{'debug'},
    "fetch|f" => \$Opt{'fetch'},
    "help|h" => \$Opt{'help'},
    "pull|p" => \$Opt{'pull'},
    "push|P" => \$Opt{'push'},
    "recursive|r" => \$Opt{'recursive'},
    "stdin" => \$Opt{'stdin'},
    "submodule|s" => \$Opt{'submodule'},
    "test|t" => \$Opt{'test'},
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

my @Dirs = ();
my @err_compress = ();
my @err_fetch = ();
my @err_pull = ();
my @err_push = ();
my @err_test = ();
my @err_updsub = ();

if ($Opt{'stdin'}) {
    local $/ = undef;
    @Dirs = sort split("\n", <STDIN>);
}
if ($Opt{'recursive'}) {
    my $repos = `find -type d`;
    @Dirs = split("\n", $repos);
}

@Dirs = find_paths(@Dirs);

my $orig_dir = getcwd();
LOOP: for my $f (@Dirs) {
    if (-d "$f/.git/.") {
        print("================ $f ================\n");
        if (!chdir($f)) {
            warn("$progname: $f: Cannot chdir: $!\n");
            next LOOP;
        }
        if ($Opt{'test'}) {
            print("==== git fsck ====\n");
            system("git", "fsck") && (
                check_sig($?) || (
                    push(@err_test, $f),
                    warn("$progname: $f: ERRORS FOUND! Skipping other actions for this repo.\n"),
                    next LOOP
                )
            );
        }
        if ($Opt{'fetch'}) {
            print("==== git remote -v update -p ====\n");
            system("git", "remote", "-v", "update", "-p") && (check_sig($?) || push(@err_fetch, $f));
        }
        if ($Opt{'pull'}) {
            print("==== git pull --ff-only ====\n");
            system("git", "pull", "--ff-only") && (check_sig($?) || push(@err_pull, $f));
        }
        if ($Opt{'push'}) {
            print("==== git pa ====\n");
            system("git", "pa") && (check_sig($?) || push(@err_push, $f));
        }
        if ($Opt{'submodule'} && -e ".gitmodules") {
            print("==== update submodules ====\n");
            system("git", "submodule", "init") && check_sig($?);
            system("git", "submodule", "update") && (check_sig($?) || push(@err_updsub, $f));
        }
        if ($Opt{'compress'}) {
            print("==== git gc --prune=now ====\n");
            system("du -h .git | tail -1") && check_sig($?);
            system("git", "gc", "--prune=now") && (check_sig($?) || push(@err_compress, $f));
            system("du -h .git | tail -1") && check_sig($?);
        }
        print("\n");
    }
    chdir($orig_dir) || die("$progname: $orig_dir: Cannot return to original directory: $!\n");
}
scalar(@err_fetch) && print("$progname: Unable to fetch from: " . join(" ", @err_fetch) . "\n");
scalar(@err_pull) && print("$progname: Unable to pull from: " . join(" ", @err_pull) . "\n");
scalar(@err_push) && print("$progname: Unable to push from: " . join(" ", @err_push) . "\n");
scalar(@err_updsub) && print("$progname: Unable to update submodules in: " . join(" ", @err_updsub) . "\n");
scalar(@err_compress) && print("$progname: Unable to compress: " . join(" ", @err_compress) . "\n");
scalar(@err_test) && print("$progname: Error in git fsck: " . join(" ", @err_test) . "\n");

sub check_sig {
    # {{{
    my $retval = shift;
    ($retval & 127) && die("\n$progname: Child process interrupted, aborting.\n");
    return(0);
    # }}}
} # check_sig()

sub find_paths {
    # {{{
    my @dirs = @_;
    my %unique = ();
    my @retval = ();
    for my $curr (@dirs) {
        should_use($curr) && ($unique{$curr} = 1, print("using '$curr'\n"));
    }
    for my $t (keys %unique) {
        print("push $t\n");
        push(@retval, $t);
    }
    return(sort @retval);
    # }}}
} # find_paths()

sub should_use {
    # {{{
    my $dir = shift;
    # print("should_use('$dir')\n");
    my $use_it = 0;
    if ($dir =~ /.*\/\.git$/) {
        $use_it = 1;
    }
    return($use_it);
    # }}}
} # should_use()

sub print_version {
    # Print program version {{{
    print("$progname v$VERSION\n");
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<END);

Usage: $progname [options] [file [files [...]]]

Options:

  -b, --bare
    Also work on bare repositories. Incompatible with the --fetch, 
    --pull and --submodule options.
  -c, --compress
    Compress local repositories to save space
  -h, --help
    Show this help.
  -f, --fetch
    Fetch new commits from all remotes.
  -p, --pull
    Also execute "git pull --ff-only"
  -P, --push
    Also execute "git pa"
  -r, --recursive
    Update all repositories recursively under the current directory
  --stdin
    Read repository names from stdin. Example:
      find -regex '.*[^/]+\\.git\$' -type d | git update-dir --stdin -t
        Test the integrity of all repositories ending in ".git", a 
        common naming scheme of bare repositories.
  -s, --submodule
    Update submodules if .gitmodules is found.
  -t, --test
    Test integrity of local repositories by running "git fsck".
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software: you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation, either version 3 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program.
If not, see L<http://www.gnu.org/licenses/>.

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
