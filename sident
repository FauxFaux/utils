#!/usr/bin/perl -w

#=======================================================================
# $Id$
# Lists RCS-like keywords in files. Replacement for ident(1).
#
# Character set: UTF-8
# ©opyleft 2004– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License, see end of file for legal stuff.
#=======================================================================

use strict;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our ($opt_help, $opt_known, $opt_namesonly, $opt_verbose, $opt_xml) =
    (        0,          0,              0,            0,        0);

our $progname = $0;
$progname =~ s#^.*/(.*?)$#$1#;

my $rcs_id = '$Id$';
my $id_date = $rcs_id;

Getopt::Long::Configure("bundling");
GetOptions(
    "help|h"                => \$opt_help,
    "known-keywords-only|k" => \$opt_known,
    "filenames-only|l"      => \$opt_namesonly,
    "verbose|v"             => \$opt_verbose,
    "xml|x"                 => \$opt_xml
) || die("$progname: Option error. Use -h for help.\n");

$opt_help && usage(0);

my @Keywords = (
                "Id",
                "Author", "LastChangedBy",
                "Date", "LastChangedDate",
                "LastChangedRevision", "Revision", "Rev",
                "URL", "HeadURL",
                "Header",
                "Name",
                "Locker",
                "Log",
                "RCSfile",
                "Source",
                "State"
               );
my $Keyw = $opt_known ? join('|', @Keywords) : '[A-Za-z]+'; # Used in regexps

if ($opt_xml) {
    print(<<END);
<?xml version="1.0"?>
<sident>
END
}

for (@ARGV) {
    my @Out = ();
    my $File = $_;
    if (open(FromFP, "<$File")) {
        while (<FromFP>) {
            s/(\$($Keyw)\$)/push(@Out, $1)/ge;
            s/(\$($Keyw)::? .*? \$)/push(@Out, $1)/ge;
        }
        if (scalar(@Out)) {
            $opt_xml && print("  <file>\n");
            if ($opt_namesonly) {
                if ($opt_xml) {
                    printf("    <filename>%s</filename>\n",
                        txt_to_xml($File)
                    );
                } else {
                    print("$File\n");
                }
            } else {
                if ($opt_xml) {
                    printf("    <filename>%s</filename>\n",
                        txt_to_xml($File)
                    );
                } else {
                    print("\n$File:\n");
                }
                $opt_xml && print("    <keywords>\n");
                for (@Out) {
                    if ($opt_xml) {
                        printf("      <keyword>%s</keyword>\n",
                            txt_to_xml($_));
                    } else {
                        print("     $_\n");
                    }
                }
                $opt_xml && print("    </keywords>\n");
            }
            $opt_xml && print("  </file>\n");
        } else {
            if ($opt_verbose) {
                $opt_xml && print("  <file>\n");
                if ($opt_xml) {
                    printf("    <filename>%s</filename>\n",
                        txt_to_xml($File)
                    );
                } else {
                    print("\n$File:\n");
                }
                $opt_xml && print("  </file>\n");
            }
        }
    }
}

$opt_xml && print("</sident>\n");

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;
    my ($xml_start, $xml_end)  =
       (        "",       "");

    if ($opt_xml) {
        $xml_start = <<END;
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4//EN" "http://docbook.org/xml/4.3/docbookx.dtd">
<article>
  <screen>
END
        $xml_end = <<END;
</screen>
</article>
END
    }
    my $Txt = <<END;
$rcs_id

Usage: $progname [options] [file [files [...]]]

Lists RCS-like keywords in a file.

Options:

  -h, --help
      Show this help.
  -k, --known-keywords-only
      Only list keywords known to Subversion and CVS
  -l, --filenames-only
      Suppress normal output; only list names of files which contain 
      keywords
  -v, --verbose
      Also list files without keywords.
  -x, --xml
      Create XML output
END
    printf("%s%s%s",
        $xml_start,
        $opt_xml ? txt_to_xml($Txt) : "\n$Txt\n",
        $xml_end
    );
    exit($Retval);
    # }}}
}

sub D {
    # {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    if ($opt_xml) {
        printf(STDERR "<debug> <pid>%s</pid> <file>%s</file> <line>%s</line> <msg>%s</msg> </debug>\n",
            txt_to_xml($$),
            txt_to_xml($File),
            txt_to_xml($call_info[2]),
            txt_to_xml($Txt)
        );
    } else {
        print(STDERR "$File:$call_info[2] $$ $Txt\n");
    }
    return("");
    # }}}
} # D()

sub txt_to_xml {
    # Return a XML-safe version of a string {{{
    my $Txt = shift;

    $Txt =~ s/&/&amp;/gs;
    $Txt =~ s/</&lt;/gs;
    $Txt =~ s/>/&gt;/gs;
    return($Txt);
    # }}}
} # txt_to_xml()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME

sident

=head1 REVISION

$Id$

=head1 SYNOPSIS

sident [options] [file [file [...]]]

=head1 DESCRIPTION

Replacement for ident(1), lists RCS-like keywords in a file.

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-k>, B<--known-keywords-only>

Only list keywords known to Subversion and CVS.

=item B<-l>, B<--filenames-only>

Suppress normal output; only list names of files which contains 
keywords.

=item B<-v>, B<--verbose>

In addition to list keywords, also list names of files without keywords.

=item B<-x>, B<--xml>

Create XML output.

=back

=head1 BUGS

None that I know of.

=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny _AT_ sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm &lt;sunny@sunbase.org&gt;
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 SEE ALSO

ident(1)

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
# End of file $Id$
