#!/usr/bin/perl -w

#=======================================================================
# $Id$
# Send file templates to stdout
#
# Character set: UTF-8
# ©opyleft 2004– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

BEGIN {
    our @version_array;
}

use strict;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Opt = (

    'debug' => 0,
    'help' => 0,
    'local' => 0,
    'tag' => 0,
    'verbose' => 0,
    'version' => 0,

);
my @Tags = ();

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;

my $rcs_id = '$Id$';
my $id_date = $rcs_id;
$id_date =~ s/^.*?\d+ (\d\d\d\d-.*?\d\d:\d\d:\d\d\S+).*/$1/;

push(@main::version_array, $rcs_id);

my $CMD_SVN = "svn";
my $Type = "";
my $Dest = "";

Getopt::Long::Configure("bundling");
GetOptions(

    "debug" => \$Opt{'debug'},
    "help|h" => \$Opt{'help'},
    "local|l+" => \$Opt{'local'},
    "tag|t=s" => \@Tags,
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

if (defined($ARGV[1])) { # FIXME: Fix stdout
    $Type = $ARGV[0];
} else {
    usage(1);
}

defined($ARGV[1]) && ($Dest = $ARGV[1]);

my %Tag = ();
if (scalar(@Tags)) {
    for my $Curr (@Tags) {
        if ($Curr =~ /^([^=]+?)=(.*)$/) {
            $Tag{$1} = $2;
        } else {
            die("$progname: $Curr: Invalid tag, must have the form name=value\n");
        }
    }
}

if (length($Dest) && -e $Dest) {
    die("$progname: $Dest: File already exists, will not overwrite\n");
}

D(sprintf("\@Tags = \"%s", join("\", \"", @Tags) . "\""));
D(sprintf("%%Tag = \"%s", join("\", \"", %Tag) . "\""));

my $dat_file = $0;

$dat_file =~ s/^(.+\/)(.+?)$/$1/;
$dat_file .= "Lib/std/$Type";

my ($Sec, $Min, $Hour, $Day, $Mon, $Year, $Wday, $Yday, $is_dst) = localtime();
$Year += 1900;
$Mon += 1;

my $URL = "http://svn.sunbase.org/repos/utils/trunk/Lib/std/$Type";
my $tmpfile = "tmp.std." . time;

if ($Opt{'local'}) {
    mysyst("$CMD_SVN update $dat_file");
    if (open(PipeFP, "$CMD_SVN stat $dat_file |")) {
        while (<PipeFP>) {
            if (/^M/) {
                warn("$progname: WARNING: $dat_file is modified\n");
                last;
            }
        }
        close(PipeFP);
        mysyst("cp -a $dat_file $tmpfile");
    } else {
        warn("$progname: Unable to open \"$CMD_SVN stat\" pipe\n");
    }
} else {
    mysyst("$CMD_SVN export $URL $tmpfile");
}

if (length($Dest)) {
    msg(1, "Copying temp file");
    mysyst("cp -a $tmpfile $Dest");
}

if (open(FromFP, "<$tmpfile")) {
    # FIXME: Fix stdout
    if (open(DestFP, length($Dest) ? ">$Dest" : *STDOUT)) {
        while (my $Line = <FromFP>) {
            if (scalar(@Tags)) {
                for my $Curr (keys %Tag) {
                    $Line =~ s/STD${Curr}DTS/$Tag{$Curr}/g;
                }
            }
            $Line =~ s/STDyearDTS/$Year/g;
            print(DestFP $Line);
        }
        close(DestFP);
        close(FromFP);
    } else {
        die("$progname: $Dest: Cannot open file for write: $!\n");
    }
} else {
    die("$progname: $dat_file: Cannot read file: $!\n");
}

if (length($Dest)) {
    msg(1, "svn add");
    mysyst("$CMD_SVN add $Dest");
    msg(1, "mergesvn");
    if (-f "Lib/std/$Type") {
        mysyst("svn up Lib/std");
        mysyst("mergesvn -s Lib/std/$Type $Dest");
    } else {
        mysyst("mergesvn -s $URL $Dest");
    }
    mysyst("keyw $Dest");
}

unlink($tmpfile) || warn("$progname: $tmpfile: Cannot delete file: $!\n");

sub mysyst {
    # Customised system() {{{
    my @Args = @_;
    my $system_txt = sprintf("system(\"%s\");", join("\", \"", @Args));
    D("$system_txt");
    deb_wait();
    msg(1, "@_\n");
    system(@_);
    # }}}
} # mysyst()

sub deb_wait {
    # Wait until Enter is pressed if $Debug and verbose >= 2 {{{
    $Debug || return;
    if ($Opt{'verbose'} >= 2) {
        print("debug: Press ENTER...");
        <STDIN>;
    }
    # }}}
} # deb_wait()

sub print_version {
    # Print program version {{{
    for (@main::version_array) {
        print("$_\n");
    }
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<END);

Usage: $progname [options] type destfile

Create a file of a specific type using a predefined template.

Options:

  -h, --help
    Show this help.
  -l, --local
    Use local copy, don’t download.
  -t x, --tag x
    Replaces strings of the form "STDtagDTS" in the template file with 
    another string. Examples:
      -t testcmd=myscript.pl
      -t year=1997 -t "personname=John Lennon" -t os=GNU/Linux
    The option can be specified many times.
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME

std

=head1 REVISION

$Id$

=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION

Send a template of a special file type to stdout.

=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS

Quite primitive, but it works.

=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
# End of file $Id$
