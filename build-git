#!/bin/bash

#=======================================================================
# build-git
# File ID: 7075da30-98d2-11de-b3de-00248cd5cf1e
# (C)opyleft 2009 Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 3 or later
#=======================================================================

progname=build-git

rcfile=$HOME/.build-gitrc
# Directory where the git build happens
builddir=$HOME/src/other/git/build-git

# Prefix to directory tree where git will be installed. You can change it to 
# for example $HOME/local if you don’t have root access.
pref=/usr/local

# If you don’t have sudo rights or you don’t need it at the location in the 
# file system, clear the value of the $sudo variable
sudo=sudo

# Local name of remote master
local_master=master
# local_master=spearce-master

# Name of remote master
remote_master=origin/master
# remote_master=spearce/master

# Set to 1 to create and run ./configure
use_configure=0
configure_opts=

makeflags=
make_doc=1
make_info=1
hname=$(hostname)

[ -e $rcfile ] && . $rcfile

echo
echo Variables:
echo
echo "rcfile         = \"$rcfile\" ($([ -e $rcfile ] || echo -n "not ")found)"
echo "builddir       = \"$builddir\""
echo "pref           = \"$pref\""
echo "sudo           = \"$sudo\""
echo "local_master   = \"$local_master\""
echo "remote_master  = \"$remote_master\""
echo "makeflags      = \"$makeflags\""
echo "make_doc       = \"$make_doc\""
echo "make_info      = \"$make_info\""
echo "hname          = \"$hname\""
echo "use_configure  = \"$use_configure\""
echo "configure_opts = \"$use_configure\""
echo

fetch_remotes() {
    git remote | grep -q '^origin$' || {
        echo $progname: The \"origin\" remote doesn\'t exist. Something is wrong here. >&2;
        exit 1;
    }
    git remote | grep -q '^github$' || git remote add github git@github.com:sunny256/git.git
    git remote | grep -q '^spearce$' || git remote add spearce git://repo.or.cz/git/spearce.git
    echo ================= git fetch =================
    # git fetch --all arrived in v1.6.6, and that’s too recent to use.
    for f in origin github spearce; do
        echo ===== $f =====
        git fetch $f
    done
}

push_changes() {
    echo ==== push changes to github ====
    git push -f github $local_master html maint man next pu todo
    git push --tags github
    echo ==== push finished ====
}

[ -z "`git --version | grep '^git version '`" ] && {
    echo $progname: You need to have git installed to use this script. >&2;
    exit 1;
}

rmdir $builddir 2>/dev/null
if [ ! -d $builddir/. ]; then
    mkdir -p $builddir || {
        echo $progname: $builddir: Cannot create directory;
        exit 1;
    }
    rmdir $builddir
    echo ================= git clone =================
    git clone git://git.kernel.org/pub/scm/git/git.git $builddir
    cd $builddir || { echo $progname: $builddir: Cannot chdir >&2; exit 1; }
    fetch_remotes
    # git branch --track spearce-master spearce/master
fi
cd $builddir || { echo $progname: $builddir: Cannot chdir >&2; exit 1; }
git checkout $local_master || { echo Cannot check out branch >&2; exit 1; }
if [ ! -e GIT-VERSION-GEN ]; then
    # Paranoia check
    echo $progname: Didn’t find GIT-VERSION-GEN. That’s strange, aborting.
    exit 1
fi
echo ================= git status in `pwd` =================
git status
echo
echo If that looks okay to you, press Enter to fetch newest git version
echo -n and start the build, or press CTRL-C to abort.
read
echo ================= git clean =================
git clean -fxd
fetch_remotes
echo ================= Update all branches =================
tmpbranch=tmpbuildgitbr
git branch -D $tmpbranch 2>/dev/null
git checkout -b $tmpbranch
for f in master html maint man next pu todo; do
    git branch -D $f
    git branch -t $f origin/$f
done
git checkout -f $local_master
git branch -D $tmpbranch
vername=git.$local_master.`git describe --match 'v1*'`
dest=$pref/varprg/$vername
[ -d $dest/. ] && {
    echo; echo "Sorry, no new git(1) for you this time.";
    echo You’ll have to stick with `git --version` for now.;
    push_changes
    exit 0;
}
if [ "$use_configure" = "1" ]; then
    echo $progname: Creating ./configure
    make configure
    ./configure --prefix=$dest $configure_opts
fi
if [ "$make_doc" = "1" ]; then
    make_doc_str=doc
    inst_doc_str="install-doc install-html"
else
    make_doc_str=
    inst_doc_str=
fi
if [ "$make_info" = "1" ]; then
    make_info_str=info
    inst_info_str=install-info
else
    make_info_str=
    inst_info_str=
fi
echo Compiling $vername
echo ================= make $makeflags =================
make prefix=$dest $makeflags all $make_doc_str $make_info_str || exit
echo ================= make test =================
make $makeflags test
echo
echo -n If all tests succeeded, press y to continue...
read choice
[ "$choice" = "y" ] || { echo $progname: Aborted; exit 1; }
echo ================= $sudo make install =================
$sudo make prefix=$dest $makeflags install $inst_doc_str $inst_info_str
echo ================= make install finished =================
$sudo mkdir -p $pref/{bin,prg,varprg}
$sudo rm $pref/prg/git
$sudo ln -svf ../varprg/$vername $pref/prg/git
cd $pref/bin || {
    echo $progname: $pref/bin: Cannot chdir, aborting >&2;
    exit 1;
}
$sudo ln -svf ../prg/git/bin/* .
echo ================= Check that the thing works =================
hash -r
localgit=`./git --version`
globalgit=`git --version`
if [ "$localgit" = "$globalgit" ]; then
    echo Congratulations with your shiny new $globalgit
    cd $builddir || { echo $progname: $builddir: Cannot chdir >&2; exit 1; }
    git tag compiled-$hname-$(date -u +"%Y%m%dT%H%M%SZ")
    push_changes
else
    echo Uhm, something went wrong.
    echo Current version of git : $globalgit
    echo Expected version of git: $localgit
    exit 1
fi
echo ================= symlink manpages =================
cd $pref/prg/git/share/man
mansects=`ls`
for f in $mansects; do
    $sudo mkdir -p $pref/share/man/$f
    cd $pref/share/man/$f || {
        echo $progname: $pref/share/man/$f: Could not chdir, aborting >&2;
        exit 1;
    }
    pwd
    $sudo rm *
    $sudo ln -s ../../../prg/git/share/man/$f/* .
done
if [ -d $pref/prg/.svn/. ]; then
    echo ================= svn commit the symlink =================
    commitmsg=`echo $progname installed $globalgit on $(hostname); echo; suuid -t commit,$progname`
    cd $pref/prg
    echo Commit message:
    echo $commitmsg
    echo -n Press Enter to commit the symlink...
    read
    $sudo svn ci -m "$commitmsg" git
fi
