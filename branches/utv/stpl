#!/usr/bin/perl -w

#===============================================================
# $Id: stpl,v 1.1.2.6 2003/10/16 16:17:19 sunny Exp $
# Plot out data with gnuplot based on data type
#
# Character set: UTF-8
# License: GNU General Public License
# ©opyleft 2003 Øyvind A. Holm <sunny@sunbase.org>
#===============================================================

use strict;

$| = 1;

use Getopt::Std;

our ($opt_h, $opt_k, $opt_o, $opt_t, $opt_x, $opt_y) =
    (     0,      0,     "",     "",     "",     "");
getopts('hko:t:y:');

my $rcs_id = '$Id: stpl,v 1.1.2.6 2003/10/16 16:17:19 sunny Exp $';
my $rcs_id_strip = $rcs_id;
$rcs_id_strip =~ s/\$\x49d: (.*) \$$/$1/;

my $gnuplot_script = join(".", "tmp.stpl", $$, substr(rand(), 2, 5), "plt");

if (-e $gnuplot_script) {
	die("$gnuplot_script: Strange indeed — file already exists. Spooky.\n");
}

my $data_file = "";

if ($opt_h) {
	usage(0);
}

if (defined($ARGV[0])) {
	$data_file = $ARGV[0];
} else {
	usage(1);
}

process_file($data_file);

exit(0);

sub usage {
	# {{{
	my $Retval = shift;
	print <<END;

Syntax:

  $0 [options] data_file

Options:

  -h         Send this help to stdout
  -k         Keep temp file after plotting
  -t"X"      Use title X
  -xrXX:YY   Use X range XX:YY
  -yrXX:YY   Use Y range XX:YY

END
	exit($Retval);
	# }}}
}

sub process_file {
	# {{{
	my $data_file = shift;
	unless (-r $data_file) {
		die("$0: $data_file: File is unreadable or doesn’t exist.\n");
		return undef;
	}
	if (open(GnupFP, ">$gnuplot_script")) {
		# {{{
		print(GnupFP <<END);
#!/usr/bin/gnuplot -persist

# \$\x49d\$
# Gnuplot script created by $rcs_id_strip

END

		if (length($opt_x)) {
			if ($opt_x =~ /^r(.*)/) {
				# X range specified {{{
				my $Range = $1;
				if ($opt_x =~ /^r([\d\-]+:[\d\-]+)$/) {
					print(GnupFP "set xrange [$1]\n");
				} else {
					warn("\"$Range\": Invalid X range specified, ignoring it\n");
				}
				# }}}
			}
		}
		if (length($opt_y)) {
			if ($opt_y =~ /^r(.*)/) {
				# Y range specified {{{
				my $Range = $1;
				if ($opt_y =~ /^r([\d\-]+:[\d\-]+)$/) {
					print(GnupFP "set yrange [$1]\n");
				} else {
					die("\"$Range\": Invalid Y range specified\n");
				}
				# }}}
			}
		}

		print(GnupFP <<END);
set encoding iso_8859_1
set samples 250
set xdata time
set grid
set timefmt "%Y-%m-%dT%H:%M:%SZ"
set format x "%Y-%m-%d"
END

		if (length($opt_o)) {
			if ($opt_o =~ /.*\.ps$/i) {
				print(GnupFP "set terminal postscript enhanced color solid 8\nset output \"$opt_o\"\n");
			} elsif ($opt_o =~ /.*\.png$/i) {
				print(GnupFP "set terminal png\nset output \"$opt_o\"\n");
			} else {
				die("Unkonwn outfile type, has to be .ps or .png\n");
			}
		} else {
			print(GnupFP "set terminal x11\n");
		}

		if (length($opt_t)) {
			print(GnupFP "set title \"$opt_t\"\n");
		}

		while (<>) {
			if (/^(\d\d\d\d)[\- \/](\d\d)[\- \/](\d\d)T(\d\d):(\d\d):(\d\d)\s+(\d+)/) {
			}
		}

		print(GnupFP <<END);
plot \\
"$data_file" using 1:2 title " " with line 1, \\
"$data_file" using 1:2 smooth bezier title " " with line -1

END

		close(GnupFP);

		system("gnuplot -persist $gnuplot_script");
		if ($opt_k) {
			print(STDERR "Keeping temp file $gnuplot_script\n");
		} else {
			unlink($gnuplot_script) || warn("$gnuplot_script: Unable to delete temporary file: $!\n");
		}
		if ($opt_o =~ /^.*\.ps$/i) {
			system("gv $opt_o");
		}
		# }}}
	} else {
		warn("$gnuplot_script: Can’t open file for write: $!\n");
	}
	# }}}
}

__END__

# vim: set fileencoding=UTF-8 filetype=perl foldmethod=marker foldlevel=0 :
# End of file $Id: stpl,v 1.1.2.6 2003/10/16 16:17:19 sunny Exp $
