Index: wlan-list
===================================================================
--- wlan-list	(revision 1921)
+++ wlan-list	(working copy)
@@ -10,6 +10,8 @@
 #=======================================================================
 
 use strict;
+use POSIX qw{ strftime };
+use Time::HiRes qw{ gettimeofday };
 use Getopt::Long;
 
 $| = 1;
@@ -22,6 +24,7 @@
     'help' => 0,
     'version' => 0,
     'verbose' => 0,
+    'xml' => 0,
 );
 
 our $progname = $0;
@@ -38,16 +41,96 @@
     "help|h" => \$Opt{'help'},
     "version" => \$Opt{'version'},
     "verbose|v" => \$Opt{'verbose'},
+    "xml|x" => \$Opt{'xml'},
 ) || die("$progname: Option error. Use -h for help.\n");
 
 $Opt{'debug'} && ($Debug = 1);
 $Opt{'help'} && usage(0);
 $Opt{'version'} && print_version();
 
+if ($Opt{'xml'}) {
+    print(<<END);
+<?xml version="1.0" encoding="UTF-8"?>
+
+<wlan>
+END
+}
+
 if ($Opt{'verbose'}) {
     system("iwlist ath0 scan | less");
 } elsif ($Opt{'encrypted'}) {
     system("iwlist ath0 scan | egrep '(Address:|ESSID:|Quality=|Encryption)' | perl -pe 's/(Encryption key:off)/\x1B[1m$1\x1B[m/g;'");
+} elsif ($Opt{'xml'}) {
+    my $found_cell = 0;
+    if (open(PipeFP, "iwlist ath0 scan |")) {
+        while (1) {
+            my $curr_time = sprintf("%.6f", 1.0 * Time::HiRes::time());
+            my ($Sec, $Min, $Hour, $Day, $Mon, $Year, $Wday, $Yday) = gmtime(1.0 * $curr_time - 0.0);
+            $Sec = sprintf("%02u", $Sec);
+            $Min = sprintf("%02u", $Min);
+            $Hour = sprintf("%02u", $Hour);
+            $Day = sprintf("%02u", $Day);
+            $Mon = sprintf("%02u", $Mon + 1);
+            $Year = sprintf("%04u", $Year + 1900);
+
+            D("curr_time = '$curr_time'");
+            my $Date = "$Year-$Mon-${Day}T$Hour:$Min:$Sec" .
+                ($curr_time =~ /^(\d+)(\.\d+)/ ? $2 : "") .
+                "Z";
+            print("$Date\n");
+        }
+        my $First = 1;
+        while (<PipeFP>) {
+            chomp(my $Line = $_);
+            D("\$Line = '$Line'");
+            $Line =~ s/^ +//;
+            if ($Line =~ /^Cell (\d+) - Address: (\S+)$/) {
+                $found_cell = 1;
+                if ($First) {
+                    $First = 0;
+                } else {
+                    print("  </cell>\n");
+                }
+                printf(
+                    "  <cell num=\"%s\">\n    <macaddr>%s<\/macaddr>",
+                    txt_to_xml($1), txt_to_xml($2)
+                );
+                $Line = "";
+            }
+            $Line =~ s/^ESSID:"(.*)"$/sprintf("    <essid>$1<\/essid>")/e;
+            $Line =~ s/^Mode:(.*)$/sprintf("    <mode>$1<\/mode>")/e;
+            $Line =~ s{^
+                Frequency:(\S+)\ (\S+)\ \(Channel\ (\d+)\)$
+            }{
+                sprintf(
+                    "    <freq unit=\"%s\">%s<\/freq>\n    <channel>%s<\/channel>",
+                    txt_to_xml($2), txt_to_xml($1), txt_to_xml($3)
+                )
+            }ex;
+            $Line =~ s{^
+                Quality=(\S+)\s+
+                Signal\ level=(\S+)\ (\S+)\s+
+                Noise\ level=(\S+)\ (\S+)
+                $
+            }{
+                sprintf(
+                    "    <quality>%s</quality>\n    <signallevel unit=\"%s\">%s</signallevel>\n    <noiselevel unit=\"%s\">%s</noiselevel>",
+                    txt_to_xml($1), txt_to_xml($3), txt_to_xml($2), txt_to_xml($5), txt_to_xml($4)
+                )
+            }ex;
+            $Line =~ s/Encryption key:(on|off)$/    <encryption>$1<\/encryption>/;
+            $Line =~ s/^Bit Rate:(\S+) (\S+)$/sprintf("    <rate unit=\"%s\">%s<\/rate>", txt_to_xml($2), txt_to_xml($1))/e;
+            $Line =~ s/^Extra:([a-z_]+)=(.*)$/sprintf("    <extra name=\"%s\">%s<\/extra>", txt_to_xml($2), txt_to_xml($1))/e;
+            $Line =~ s/^.*Scan completed :.*//;
+            length($Line) && print("$Line\n");
+        }
+        close(PipeFP);
+        # print("    <date>$Date</date>\n");
+        $found_cell && print("  </cell>\n");
+    } else {
+        die("$progname: Unable to open pipe: $!");
+    }
+    print("</wlan>\n");
 } else {
     system("wlanconfig ath0 list scan");
 }
@@ -102,6 +185,28 @@
     # }}}
 } # D()
 
+sub txt_to_xml {
+    # Convert plain text to XML {{{
+    my $Txt = shift;
+    $Txt =~ s/&/&amp;/gs;
+    $Txt =~ s/</&lt;/gs;
+    $Txt =~ s/>/&gt;/gs;
+    return($Txt);
+    # }}}
+}
+
+sub xml_to_txt {
+    # Convert XML data to plain text {{{
+    my $Txt = shift;
+    $Txt =~ s/&lt;/</gs;
+    $Txt =~ s/&gt;/>/gs;
+    $Txt =~ s/&amp;/&/gs;
+    $Txt =~ s/&quot;/"/gs;
+    $Txt =~ s/&apos;/'/gs;
+    return($Txt);
+    # }}}
+}
+
 __END__
 
 # Plain Old Documentation (POD) {{{
