#!/usr/bin/perl -w

#=======================================================================
# $Id$
# Display a graph which compares the compress ratio from several 
# programs. Quick & Dirty™.
#
# Character set: UTF-8
# ©opyleft 2006– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License, see end of file for legal stuff.
#=======================================================================

use strict;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Opt = (
    'debug' => 0,
    'help' => 0,
    'version' => 0,
);

our $progname = $0;
$progname =~ s#^.*/(.*?)$#$1#;

my $rcs_id = '$Id$';
my $id_date = $rcs_id;
$id_date =~ s/^.*?\d+ (\d\d\d\d-.*?\d\d:\d\d:\d\d\S+).*/$1/;
my $rcs_clean = $rcs_id;
$rcs_clean =~ s/\$//g;
$rcs_clean =~ s/\s+$//g;

Getopt::Long::Configure("bundling");
GetOptions(
    "debug" => \$Opt{'debug'},
    "help|h" => \$Opt{'help'},
    "version" => \$Opt{'version'},
) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
$Opt{'version'} && print_version();

LOOP:
for my $File (@ARGV) {
    my $orig_size = file_size($File);

    unless (length($orig_size)) {
        warn("$progname: $File: Unable to stat() file\n");
        next LOOP;
    }
    if ($orig_size == 0) {
        warn("$progname: $File: File cannot be empty\n");
        next LOOP;
    }
    unless (open(DatFP, ">", "$File.compr")) {
        warn("$progname: $File.compr: Cannot open file for write: $!\n");
        next LOOP;
    }

    for my $Comp (1..9) {
        my $tmp_prefix = "$File.$Comp.tmp";

        system("gzip -$Comp <$File >$tmp_prefix.gz");
        my $compr_gzip = file_size("$tmp_prefix.gz");
        unlink("$tmp_prefix.gz");
        system("bzip2 -$Comp <$File >$tmp_prefix.bz2");
        my $compr_bzip = file_size("$tmp_prefix.bz2");
        unlink("$tmp_prefix.bz2");
        system("zip -$Comp - - 2>/dev/null <$File >$tmp_prefix.zip");
        my $compr_zip = file_size("$tmp_prefix.zip");
        unlink("$tmp_prefix.zip");

        my $ratio_gzip = 100 - ($compr_gzip/$orig_size) * 100;
        my $ratio_bzip = 100 - ($compr_bzip/$orig_size) * 100;
        my $ratio_zip = 100 - ($compr_zip/$orig_size) * 100;

        print(DatFP "$Comp\t$ratio_gzip\t$ratio_bzip\t$ratio_zip\n");
    }
    close(DatFP);
    my $gnuplot_file = "$File.gnuplot";
    if (open(GnuplFP, ">", "$gnuplot_file")) {
        print(GnuplFP <<END);
#!/usr/bin/gnuplot -persist

# \$Id\$
# File generated by "$rcs_clean"

set yrange [0:100]
plot "$File.compr" using 1:2 title "gzip" w lp, \\
"$File.compr" using 1:3 title "bzip2" w lp, \\
"$File.compr" using 1:4 title "zip" w lp
END
        close(GnuplFP);
    }
    system("gnuplot -persist $gnuplot_file");
}

sub file_size {
    my $File = shift;
    my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size, $atime, 
        $mtime, $ctime, $blksize, $blocks) = stat($File);
    return(defined($size) ? $size : "");
}

sub print_version {
    # Print program version {{{
    print("$rcs_id\n");
    exit(0);
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    print(<<END);

$rcs_id

Usage: $progname [options] [file [files [...]]]

Display a graph which compares the compress ratio from several programs. 
Quick & Dirty™. Needs gnuplot(1).

Options:

  -h, --help
    Show this help.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 REVISION

$Id$

=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm &lt;sunny@sunbase.org&gt;
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
# End of file $Id$
