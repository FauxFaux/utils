#!/usr/bin/perl -w

#=======================================================================
# $Id$
# Add new waypoints or trackpoints to the database.
#
# Character set: UTF-8
# ©opyleft 2008– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
#=======================================================================

BEGIN {
    our @version_array;
}

use strict;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Std = (

    'database' => "gps",
    'timezone' => "",
    'type' => "track",

);

our %Opt = (

    'database' => $Std{'database'},
    'debug' => 0,
    'help' => 0,
    'timezone' => $Std{'timezone'},
    'type' => $Std{'type'},
    'verbose' => 0,
    'version' => 0,
    'waypoint' => 0,

);

our $progname = $0;
$progname =~ s/^.*\/(.*?)$/$1/;

my $rcs_id = '$Id$';
my $id_date = $rcs_id;
$id_date =~ s/^.*?\d+ (\d\d\d\d-.*?\d\d:\d\d:\d\d\S+).*/$1/;

push(@main::version_array, $rcs_id);

Getopt::Long::Configure("bundling");
GetOptions(

    "database|D=s" => \$Opt{'database'},
    "debug" => \$Opt{'debug'},
    "help|h" => \$Opt{'help'},
    "timezone|T=s" => \$Opt{'timezone'},
    "type|t=s" => \$Opt{'type'},
    "verbose|v+" => \$Opt{'verbose'},
    "version" => \$Opt{'version'},
    "waypoint|w" => \$Opt{'waypoint'},

) || die("$progname: Option error. Use -h for help.\n");

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
if ($Opt{'version'}) {
    print_version();
    exit(0);
}

my $tz_str = "";
if (length($Opt{'timezone'})) {
    if ($Opt{'timezone'} =~ /^[\+\-][0-2][0-9]{3}$/) {
        $tz_str = $Opt{'timezone'};
    } elsif ($Opt{'timezone'} =~ /^z$/i) {
        $tz_str = $Opt{'timezone'};
    } elsif ($Opt{'timezone'} =~ /^[a-z]+$/i) {
        $tz_str = " $Opt{'timezone'}";
    } else {
        die("$progname: $Opt{'timezone'}: Invalid time zone\n");
    }
}

for my $Currarg (@ARGV) {
    for my $Currfile (glob($Currarg)) {
        D("Currfile = '$Currfile'");
        if ($Opt{'type'} =~ /picture/) {
            if ($Currfile =~ /\.jpg$/i) {
                my $tz_str = length($Opt{'timezone'})
                    ? "-T $Opt{'timezone'} "
                    : "";
                my $exec_str =
                    "gpst-pic $tz_str$Currfile | psql -c \"COPY pictures (" .
                    join(", ",
                        "version",
                        "date",
                        "coor",
                        "descr",
                        "filename",
                        "author"
                    ) .
                    ") FROM stdin\" $Opt{'database'}";
                msg(1, "Executing '$exec_str'...");
                system($exec_str);
            }
        }
        if ($Opt{'type'} =~ /track/) {
            my $exec_str =
                "gpst -o pgtab -d -rpt $Currfile | " .
                "psql -a -c \"COPY logg (" .
                join(", ",
                    "date",
                    "coor",
                    "ele",
                    "sted",
                    "dist",
                    "description"
                ) .
                ") FROM stdin\" $Opt{'database'}";
            msg(1, "Executing '$exec_str'...");
            system($exec_str);
        }
        if ($Opt{'type'} =~ /waypoint/) {
            my $exec_str =
                "gpst -o pgwtab $Currfile | " .
                "psql -a -c \"COPY wayp_new (" .
                join(", ",
                    "coor",
                    "name",
                    "ele",
                    "type",
                    "time",
                    "cmt",
                    "descr",
                    "src",
                    "sym"
                ) .
                ") FROM stdin\" $Opt{'database'}";
            msg(1, "Executing '$exec_str'...");
            system($exec_str);
        }
    }
}

sub print_version {
    # Print program version {{{
    for (@main::version_array) {
        print("$_\n");
    }
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    if ($Opt{'verbose'}) {
        print("\n");
        print_version();
    }
    print(<<END);

Usage: $progname [options] [file [files [...]]]

Options:

  -D X, --database X
    Load into PostgreSQL database X. Default: "$Std{'database'}".
  -h, --help
    Show this help.
  -T X, --timezone X
    Prepend X as timezone to the date. Valid formats:
      UTC offset
        A '+' or '-' followed by a four-digit number (HHMM) which 
        indicates the offset relative to UTC. Examples:
          +0000
          -1600
          +0630
      Time zone abbreviation. Examples:
        UTC
        Z
        CET
  -t X, --type X
    Comma-separated list of point types to extract from files:
      picture
      track
      waypoint
    Default: "$Std{'type'}".
  -v, --verbose
    Increase level of verbosity. Can be repeated.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub msg {
    # Print a status message to stderr based on verbosity level {{{
    my ($verbose_level, $Txt) = @_;

    if ($Opt{'verbose'} >= $verbose_level) {
        print(STDERR "$progname: $Txt\n");
    }
    # }}}
} # msg()

sub D {
    # Print a debugging message {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 REVISION

$Id$

=head1 SYNOPSIS

 [options] [file [files [...]]]

=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-v>, B<--verbose>

Increase level of verbosity. Can be repeated.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm E<lt>sunny@sunbase.orgE<gt>
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
# End of file $Id$
