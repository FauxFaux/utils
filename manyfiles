#!/usr/bin/perl -w

#=======================================================================
# $Id$
# Creates loads of files in the current directory. Used for 
# stresstesting file systems and stuff.
#
# Character set: UTF-8
# ©opyleft 2004– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License, see end of file for legal stuff.
#=======================================================================

use strict;
use Getopt::Long;
use Time::HiRes qw{ gettimeofday };

$| = 1;

our $Debug = 0;

our ($opt_help, $opt_count) =
    (        0,          0);

my $VERSION = "0.1";

our $progname = $0;
$progname =~ s#^.*/(.*?)$#$1#;

my $rcs_id = '$Id$';
my $id_date = $rcs_id;
$id_date =~ s/^.*?\d+ (\d\d\d\d-.*?\d\d:\d\d:\d\d\S+).*/$1/;

Getopt::Long::Configure("bundling");
GetOptions(
    "help|h"       => \$opt_help,
    "count|c=i"       => \$opt_count
) || die("$progname: Option error. Use -h for help.\n");

$opt_help && usage(0);

$opt_count && $opt_count++;

my $a;
my $start_time = gettimeofday;

for ($a = 1; $a != $opt_count; $a++) {
    unless (open(FP, ">$a")) {
        print(".");
    }
}

my $end_time = gettimeofday;
my $total_time = $end_time - $start_time;
$a--;

printf("Created %u file%s in %s second%s%s.\n",
       $a,
       $a == 1 ? "" : "s",
       $total_time,
       $total_time == 1 ? "" : "s",
       $total_time ? sprintf(", %s files/second on average", $a / $total_time) : ""
);

close(FP);

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;
    print(<<END);

$progname v$VERSION -- $id_date

Usage: $progname [options] [file [files [...]]]

Creates loads of empty files in the current directory. Used for file 
system profiling and other interesting stuff.

Options:

-c, --count x  Stop after x files are created.
-h, --help     Show this help.

END
    exit($Retval);
    # }}}
}

sub D {
    # {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME



=head1 REVISION

$Id$

=head1 SYNOPSIS



=head1 DESCRIPTION



=head1 OPTIONS

=over 4

=item B<-h>, B<--help>

Print a brief help summary.

=back

=head1 BUGS



=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny _AT_ sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm &lt;sunny@sunbase.org&gt;
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 SEE ALSO

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
# End of file $Id$
