#!/usr/bin/perl -w

#===============================================================
# $Id: afv_move,v 1.5 2004/04/15 02:06:24 sunny Exp $
# Reads file names from stdin or files and places them into a
# directory structure based on a date in the file name or the
# modifcation time.
#
# Character set: UTF-8
# License: GNU General Public License
# ©opyleft 2004 Øyvind A. Holm <sunny@sunbase.org>
#===============================================================

use strict;
use File::Copy;
use File::Path;
use Getopt::Std;
our ($opt_c, $opt_d, $opt_h, $opt_l, $opt_L, $opt_m, $opt_o, $opt_s, $opt_v) =
    (0,      "",     0,      0,      0,      0,      0,      0,      0     );
getopts('cd:hlLmosv');

$| = 1;

my $DEFAULT_DIR = "%Y/%m/%d";

if ($opt_h) {
	print(<<END);

Syntax: $0 [options] [file_with_filenames [...]]

The program reads file names from stdin or from the files on the command
line and moves or copies the files into a directory structure defined by
the user. It can also create soft or hard links if the file system
allows it. The file name has to contain a date on the format

  yyyymmddThhmmssZ

which is the date specified in UTC.

Options:

-c    Copy files instead of move
-d X  Place files under directory X
      Use the following modifiers for subtree layout:

      %Y  Year with four digits
      %m  Month (00..12)
      %d  Day of month (00..31)
      %H  Hour (00..23)
      %M  Minutes (00..59)
      %S  Seconds (00..61)
      %%  Regular percent sign

      If the -d option is not specified, "$DEFAULT_DIR" will be used.

-h    Help me, please.
-l    Create symlinks instead of moving or copying files. The file names
      in the input has to contain an absolute path to prevent creating
      dead links. File names not starting with "/" will be ignored.
-L    Create hard links to the files instead of copying or moving.
-m    Use the file modification time instead of date found in the file
      name. All files will be affected, not only those with a date in
      the file name.
-o    Overwrite existing files
-s    Simulate, don't really move files
-v    Verbose execution

Note: Files on the command line will not be moved themselves, but shall
contain file names of the relevant files to be moved.

Examples:

ls | afv_move -v
find /var/tmp/afvroot | afv_move -vl -d newdir/%Y-%m-%d/%H
afv_move -vL /tmp/filenames.txt -d %Y/%Y-%m-%d

END
	exit(0);
}

my $simul_str = $opt_s ? " (simulating)" : "";

if ($opt_c && $opt_l) {
	die("Can’t use -c and -l option togheter.\n");
}

LOOP: while (<>) {
	my ($Path, $File) =
	   ("",    ""   );

	chomp();
	if ($opt_l && ($_ !~ /^\//)) {
		warn("$_: Pathname is not absolute\n");
		next LOOP;
	}
	if (/\//) {
		if (/^(.*)\/([^\/]+?)$/) {
			($Path, $File) =
			($1,    $2   );
		}
	} else {
		$Path = ".";
		$File = $_;
	}
	if ($opt_m || $File =~ /^(.*?)\b(\d\d\d\d)(\d\d)(\d\d)T(\d\d)(\d\d)(\d\d)Z\b(.+)/) {
		my ($Pre, $Year, $Mon, $Day, $Hour, $Min, $Sec, $Rest);
		unless ($opt_m) {
			($Pre, $Year, $Mon, $Day, $Hour, $Min, $Sec, $Rest) =
			($1,   $2,    $3,   $4,   $5,    $6,   $7,   $8   );
		}
		my $From = "$Path/$File";
		if (-e $From) {
			if (-f $From) {
				if ($opt_m) {
					my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size, $atime, $mtime, $ctime, $blksize, $blocks) = stat($From);
					my @TA = gmtime($mtime);
					($Year,       $Mon,     $Day,   $Hour,  $Min,     $Sec) =
					($TA[5]+1900, $TA[4]+1, $TA[3], $TA[2], $TA[1], $TA[0]);
					$Year = sprintf("%04u", $Year);
					$Mon  = sprintf("%02u", $Mon);
					$Day  = sprintf("%02u", $Day);
					$Hour = sprintf("%02u", $Hour);
					$Min  = sprintf("%02u", $Min);
					$Sec  = sprintf("%02u", $Sec);
				}
				my $Dir = length($opt_d) ? $opt_d : $DEFAULT_DIR;
				$Dir =~ s/%Y/$Year/g;
				$Dir =~ s/%m/$Mon/g;
				$Dir =~ s/%d/$Day/g;
				$Dir =~ s/%H/$Hour/g;
				$Dir =~ s/%M/$Min/g;
				$Dir =~ s/%S/$Sec/g;
				$Dir =~ s/%%/%/g;

				if (!$opt_o && -e "$Dir/$File") {
					warn("$Dir/$File: File already exists, will not overwrite\n");
				} else {
					$opt_s || -d $Dir || mkpath($Dir, $opt_v ? 1 : 0, 0777) || die("mkpath(\"$Dir\", 0, 0777): $!");
					if ($opt_c) {
						$opt_v && print("Copying \"$From\" to \"$Dir/$File\"$simul_str...");
						$opt_s || copy($From, "$Dir/$File") || die("\ncopy(\"$From\", \"$Dir/$File\"): $!");
						$opt_v && print("OK\n");
					} elsif ($opt_L) {
						$opt_v && print("Linking \"$From\" to \"$Dir/$File\"$simul_str...");
						$opt_s || link($From, "$Dir/$File") || die("\nlink(\"$From\", \"$Dir/$File\"): $!");
						$opt_v && print("OK\n");
					} elsif ($opt_l) {
						$opt_v && print("Symlinking \"$Path/$File\" to \"$Dir/$File\"$simul_str...");
						$opt_s || symlink($From, "$Dir/$File") || die("\nsymlink(\"$From\", \"$Dir/$File\"): $!");
						$opt_v && print("OK\n");
					} else {
						$opt_v && print("Moving \"$From\" to \"$Dir/$File\"$simul_str...");
						$opt_s || move($From, "$Dir/$File") || die("\nmove(\"$From\", \"$Dir/$File\"): $!");
						$opt_v && print("OK\n");
					}
				}
			} else {
				warn("Ignoring non-regular file $From\n");
			}
		} else {
			warn("$From: File not found\n");
		}
	}
}

__END__

# vim: set fileencoding=UTF-8 filetype=perl foldmethod=marker foldlevel=0 :
# End of file $Id: afv_move,v 1.5 2004/04/15 02:06:24 sunny Exp $
