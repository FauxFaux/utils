#!/usr/bin/perl -w

#=======================================================================
# $Id$
# Merges new changes into a file version controlled by Subversion.
#
# Character set: UTF-8
# ©opyleft 2006– Øyvind A. Holm <sunny@sunbase.org>
# License: GNU General Public License version 2 or later, see end of 
# file for legal stuff.
# This file is part of the svnutils project — http://svnutils.tigris.org
#=======================================================================

use strict;
use Getopt::Long;

$| = 1;

our $Debug = 0;

our %Opt = (
    'alias' => "",
    'debug' => 0,
    'diff' => 0,
    'dry-run' => 0,
    'help' => 0,
    'to' => "HEAD",
    'version' => 0,
);

our $progname = $0;
$progname =~ s#^.*/(.*?)$#$1#;

my $rcs_id = '$Id$';
my $id_date = $rcs_id;
$id_date =~ s/^.*?\d+ (\d\d\d\d-.*?\d\d:\d\d:\d\d\S+).*/$1/;

Getopt::Long::Configure("bundling");
GetOptions(
    "alias|a=s" => \$Opt{'alias'},
    "debug" => \$Opt{'debug'},
    "diff|d" => \$Opt{'diff'},
    "dry-run" => \$Opt{'dry-run'},
    "help|h" => \$Opt{'help'},
    "to|t=s" => \$Opt{'to'},
    "version" => \$Opt{'version'},
) || die("$progname: Option error. Use -h for help.\n");

my $CMD_SVN = "svn";

my $PROP_NAME = "mergesvn";

$Opt{'debug'} && ($Debug = 1);
$Opt{'help'} && usage(0);
$Opt{'version'} && print_version();

my @Files = @ARGV;

if (!scalar(@Files)) {
    while (<STDIN>) {
        chomp;
        push(@Files, $_);
    }
}

LOOP:
for (@Files) {
    # {{{
    my $File = $_;
    my $prop_val = `svn propget $PROP_NAME $File`;
    if (!length($prop_val)) {
        warn("$progname: $File: \"mergesvn\" property not found, " .
             "skipping file\n");
        next LOOP;
    }
    my @new_prop = ();
    my @Props = split(/\n/, $prop_val);
    D("Props = (\"" . join("\", \"", @Props) . "\")");
    for my $Curr (@Props) {
        if ($Curr =~ /^(\d+) (.+)$/) {
            my ($last_merge, $orig_master) =
               (         $1,           $2);
            $orig_master =~ s/[\r\n]+$//;
            my $master_file = length($Opt{'alias'})
                                ? $Opt{'alias'}
                                : $orig_master;
            my $curr_rev = highest_revision($master_file, $Opt{'to'});
            if ($curr_rev !~ /^\d+$/) {
                warn("$progname: $master_file: " .
                     "Unable to get newest revision\n");
                next LOOP;
            }
            if ($Opt{'diff'}) {
                my $Repos = repos_url($File);
                mysyst(
                    $CMD_SVN, "diff",
                    repos_url($master_file) . "\@$last_merge",
                    $Repos
                );
                next LOOP;
            }
            if ($Opt{'dry-run'}) {
                mysyst(
                    $CMD_SVN, "merge", "-r$last_merge:$curr_rev",
                    "--dry-run",
                    $master_file, $File
                );
            } else {
                mysyst(
                    $CMD_SVN, "merge", "-r$last_merge:$curr_rev",
                    $master_file, $File
                );
            }
            push(@new_prop, "$curr_rev $orig_master");
        } else {
            warn("$File: \"$Curr\": Invalid property line\n");
            next LOOP;
        }
    }
    $Opt{'dry-run'} ||
        mysyst($CMD_SVN, "propset", $PROP_NAME, join("\n", @new_prop), $File);
    # }}}
}

sub highest_revision {
    # Return the newest revision of a versioned element inside a 
    # specified revision range
    # {{{
    my ($Path, $max_rev) = @_;
    my $safe_path = escape_filename($Path);
    my $highest_rev = `$CMD_SVN log -r$max_rev:1 --limit 1 --xml $safe_path`; # FIXME
    $highest_rev =~ s/^.*?<logentry.+?revision="(\d+)".*?>.*/$1/s;
    return($highest_rev);
    # }}}
} # highest_revision()

sub repos_url {
    # Return the repository address of an element {{{
    my $File = shift;
    my $safe_file = escape_filename($File);
    my $Retval = `$CMD_SVN info --xml $safe_file`;
    $Retval =~ s/^.*<url>(.*?)<\/url>.*$/$1/s;
    return($Retval);
    # }}}
}

sub mysyst {
    # Customised system() {{{
    my @Args = @_;
    my $system_txt = sprintf("system(\"%s\");", join("\", \"", @Args));
    D("$system_txt");
    deb_wait();
    print("---- @_\n");
    system(@_);
    # }}}
} # mysyst()

sub escape_filename {
    # Kludge for handling file names with spaces and characters that 
    # trigger shell functions
    # {{{
    my $Name = shift;
    # $Name =~ s/\\/\\\\/g;
    # $Name =~ s/([ \t;\|!&"'`#\$\(\)<>\*\?])/\\$1/g;
    $Name =~ s/'/\\'/g;
    $Name = "'$Name'";
    return($Name);
    # }}}
} # escape_filename()

sub deb_wait {
    # Wait until Enter is pressed if --debug {{{
    $Debug || return;
    print("debug: Press ENTER...");
    <STDIN>;
    # }}}
} # deb_wait()

sub print_version {
    # Print program version {{{
    print("$rcs_id\n");
    exit(0);
    # }}}
} # print_version()

sub usage {
    # Send the help message to stdout {{{
    my $Retval = shift;

    print(<<END);

$rcs_id

Merge changes between Subversion controlled files or directories. 
Elements without the "mergesvn" property will be ignored. If no 
filenames are specified on the command line, it reads filenames from 
stdin.

Usage: $progname [options] [file [files [...]]]

Options:

  -a x, --alias x
    Use x as alias for the master URL. The old value will still be 
    written to the mergesvn property.
  -d, --diff
    Instead of merging, show a repository diff between the master URL 
    and the versioned element.
  --dry-run
    Try operation without making any changes. Can be used to see if the 
    merge will result in conflicts.
  -h, --help
    Show this help.
  -t x, --to x
    Merge to revision x instead of HEAD.
  --version
    Print version information.
  --debug
    Print debugging messages.

END
    exit($Retval);
    # }}}
} # usage()

sub D {
    # Print a debugging message if --debug {{{
    $Debug || return;
    my @call_info = caller;
    chomp(my $Txt = shift);
    my $File = $call_info[1];
    $File =~ s#\\#/#g;
    $File =~ s#^.*/(.*?)$#$1#;
    print(STDERR "$File:$call_info[2] $$ $Txt\n");
    return("");
    # }}}
} # D()

__END__

# Plain Old Documentation (POD) {{{

=pod

=head1 NAME

mergesvn

=head1 REVISION

$Id$

=head1 SYNOPSIS

mergesvn [options] [file [files [...]]]

=head1 DESCRIPTION

Merge changes between Subversion controlled files or directories.
Elements without the "mergesvn" property will be ignored.
If no filenames are specified on the command line, it reads filenames 
from stdin.

Files or directories to be controlled by mergesvn must have the 
following property set:

=over 4

=item B<mergesvn>

=back

Contains one line for every place to merge from.
The line consists of two elements, the revision in the master file the 
last merge was done, and path or URL to the master file.
These two fields are separated by exactly one space (U+0020).

=head1 OPTIONS

=over 4

=item B<-a>, B<--alias> I<x>

Use I<x> as alias for the master URL. The old value will still be 
written to the mergesvn property.

=item B<-d>, B<--diff>

Instead of merging, show a repository diff between the master URL and 
the versioned element.

=item B<--dry-run>

Try operation without making any changes.
Can be used to see if the merge will result in conflicts.

=item B<-h>, B<--help>

Print a brief help summary.

=item B<-t>, B<--to> I<x>

Merge to revision I<x> instead of HEAD.

=item B<--version>

Print version information.

=item B<--debug>

Print debugging messages.

=back

=head1 BUGS

=over 4

=item The svn(1) client does not support diffs between different 
repositories (yet), so the B<--diff> option will only work with elements 
that has the master in the same repository.

=back

=head1 AUTHOR

Made by Øyvind A. Holm S<E<lt>sunny@sunbase.orgE<gt>>.

=head1 COPYRIGHT

Copyleft © Øyvind A. Holm &lt;sunny@sunbase.org&gt;
This is free software; see the file F<COPYING> for legalese stuff.

=head1 LICENCE

This program is free software; you can redistribute it and/or modify it 
under the terms of the GNU General Public License as published by the 
Free Software Foundation; either version 2 of the License, or (at your 
option) any later version.

This program is distributed in the hope that it will be useful, but 
WITHOUT ANY WARRANTY; without even the implied warranty of 
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along 
with this program; if not, write to the Free Software Foundation, Inc., 
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=head1 SEE ALSO

svn(1)

=cut

# }}}

# vim: set fenc=UTF-8 ft=perl fdm=marker ts=4 sw=4 sts=4 et fo+=w :
# End of file $Id$
