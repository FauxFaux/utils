#!/usr/bin/perl -w

#===============================================================
# $Id: afv_move,v 1.3 2004/04/12 22:10:57 sunny Exp $
# Reads file names generated by afv(1) and stores them into
# subdirectories of the default format yyyy/mm/dd/ or
# another structure defined by the user.
#
# Character set: UTF-8
# License: GNU General Public License
# ©opyleft 2004 Øyvind A. Holm <sunny@sunbase.org>
#===============================================================

use strict;
use File::Copy;
use File::Path;
use Getopt::Std;
our ($opt_c, $opt_d, $opt_h, $opt_o, $opt_s, $opt_v) =
    (     0,     "",      0,      0,      0,      0);
getopts('cd:hosv');

$| = 1;

my $DEFAULT_DIR = "%Y/%m/%d";

if ($opt_h) {
	print(<<END);

Syntax: $0 [options] [file_with_filenames [...]]

The program reads file names from stdin or from the files on the command
line.

Options:

-c    Copy files instead of move
-d X  Place files under directory X
      Use the following modifiers for subtree layout:

      %Y  Year with four digits
      %m  Month (00..12)
      %d  Day of month (00..31)
      %H  Hour (00..23)
      %M  Minutes (00..59)
      %S  Seconds (00..61)
      %%  Regular percent sign

	  If the -d option is not specified, "$DEFAULT_DIR" will be used.

-h    Help me, please.
-o    Overwrite existing files
-s    Simulate, don't really move files
-v    Verbose execution

Note: Files on the command line will not be moved themselves, but shall
contain file names of the relevant files created by afv(1).

Examples:

ls | afv_move -v
find /var/tmp/afvroot | afv_move -v -d newdir/%Y-%m-%d/%H

END
	exit(0);
}

my $simul_str = $opt_s ? " (simulating)" : "";

while (<>) {
	my ($Path, $File) =
	   (   "",    "");

	chomp();
	if (/\//) {
		if (/^(.*)\/([^\/]+?)$/) {
			($Path, $File) =
			(   $1,    $2);
		}
	} else {
		$Path = ".";
		$File = $_;
	}
	if ($File =~ /^(.*?)\b(\d\d\d\d)(\d\d)(\d\d)T(\d\d)(\d\d)(\d\d)Z(\..+)/) {
		my ($Pre, $Year, $Mon, $Day, $Hour, $Min, $Sec, $Rest) =
		   (  $1,    $2,   $3,   $4,    $5,   $6,   $7,    $8);
		my $From = "$Path/$File";
		if (-e $From) {
			if (-f $From) {
				# my $Dir = "$opt_d/$Year/$Mon/$Day/$Hour";
				my $Dir = length($opt_d) ? $opt_d : $DEFAULT_DIR;
				$Dir =~ s/%Y/$Year/g;
				$Dir =~ s/%m/$Mon/g;
				$Dir =~ s/%d/$Day/g;
				$Dir =~ s/%H/$Hour/g;
				$Dir =~ s/%M/$Min/g;
				$Dir =~ s/%S/$Sec/g;
				$Dir =~ s/%%/%/g;

				if (!$opt_o && -e "$Dir/$File") {
					warn("$Dir/$File: File already exists, will not overwrite\n");
				} else {
					$opt_s || -d $Dir || mkpath($Dir, $opt_v ? 1 : 0, 0777) || die("mkpath(\"$Dir\", 0, 0777): $!");
					if ($opt_c) {
						$opt_v && print("Copying \"$From\" to \"$Dir/\"$simul_str...");
						$opt_s || copy($From, $Dir) || die("copy(\"$From\", \"$Dir\"): $!");
						$opt_v && print("OK\n");
					} else {
						$opt_v && print("Moving \"$From\" to \"$Dir/\"$simul_str...");
						$opt_s || move($From, $Dir) || die("move(\"$From\", \"$Dir\"): $!");
						$opt_v && print("OK\n");
					}
				}
			} else {
				warn("Ignoring non-regular file $From\n");
			}
		} else {
			warn("$From: File not found\n");
		}
	}
}

__END__

# vim: set fileencoding=UTF-8 filetype=perl foldmethod=marker foldlevel=0 :
# End of file $Id: afv_move,v 1.3 2004/04/12 22:10:57 sunny Exp $
